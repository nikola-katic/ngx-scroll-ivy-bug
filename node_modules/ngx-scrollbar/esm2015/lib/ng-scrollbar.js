/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, ViewChild, ContentChild, NgZone, ElementRef, EventEmitter, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';
import { Directionality } from '@angular/cdk/bidi';
import { fromEvent, Observable, Subject } from 'rxjs';
import { filter, map, pairwise, pluck, takeUntil, tap } from 'rxjs/operators';
import { ScrollViewport } from './scroll-viewport';
import { SmoothScrollManager } from 'ngx-scrollbar/smooth-scroll';
import { ScrollbarManager } from './utils/scrollbar-manager';
import { NativeScrollbarSizeFactory } from './utils/native-scrollbar-size-factory';
export class NgScrollbar {
    /**
     * @param {?} el
     * @param {?} zone
     * @param {?} changeDetectorRef
     * @param {?} dir
     * @param {?} smoothScroll
     * @param {?} manager
     * @param {?} nativeScrollbarSizeFactory
     */
    constructor(el, zone, changeDetectorRef, dir, smoothScroll, manager, nativeScrollbarSizeFactory) {
        this.el = el;
        this.zone = zone;
        this.changeDetectorRef = changeDetectorRef;
        this.dir = dir;
        this.smoothScroll = smoothScroll;
        this.manager = manager;
        this.nativeScrollbarSizeFactory = nativeScrollbarSizeFactory;
        /**
         * A class forwarded to scrollable viewport element
         */
        this.viewClass = this.manager.globalOptions.viewClass;
        /**
         * A class forwarded to the scrollbar track element
         */
        this.trackClass = this.manager.globalOptions.trackClass;
        /**
         * A class forwarded to the scrollbar thumb element
         */
        this.thumbClass = this.manager.globalOptions.thumbClass;
        /**
         * Minimum scrollbar thumb size
         */
        this.minThumbSize = this.manager.globalOptions.minThumbSize;
        /**
         * The duration which the scrolling takes to reach its target when scrollbar rail is clicked
         */
        this.trackClickScrollDuration = this.manager.globalOptions.trackClickScrollDuration;
        /**
         * A flag used to enable/disable the scrollbar track clicked event
         */
        this.trackClickDisabled = this.manager.globalOptions.trackClickDisabled;
        /**
         * A flag used to enable/disable the scrollbar thumb dragged event
         */
        this.thumbDragDisabled = this.manager.globalOptions.thumbDragDisabled;
        /**
         * Disable custom scrollbar and switch back to native scrollbar
         */
        this.disabled = false;
        /**
         * Sets the supported scroll track of the viewport, there are 3 options:
         *
         * - `vertical` Use both vertical and horizontal scrollbar
         * - `horizontal` Use both vertical and horizontal scrollbar
         * - `all` Use both vertical and horizontal scrollbar
         */
        this.track = this.manager.globalOptions.track;
        /**
         * When to show the scrollbar, and there are 3 options:
         *
         * - `native` (default) Scrollbar will be visible when viewport is scrollable like with native scrollbar
         * - `hover` Scrollbars are hidden by default, only visible on scrolling or hovering
         * - `always` Scrollbars are always shown even if the viewport is not scrollable
         */
        this.visibility = this.manager.globalOptions.visibility;
        /**
         *  Sets the appearance of the scrollbar, there are 2 options:
         *
         * - `standard` (default) scrollbar space will be reserved just like with native scrollbar.
         * - `compact` scrollbar doesn't reserve any space, they are placed over the viewport.
         */
        this.appearance = this.manager.globalOptions.appearance;
        /**
         * Sets the position of each scrollbar, there are 4 options:
         *
         * - `native` (Default) Use the default position like in native scrollbar.
         * - `invertY` Inverts vertical scrollbar position
         * - `invertX` Inverts Horizontal scrollbar position
         * - `invertAll` Inverts both scrollbar positions
         */
        this.position = this.manager.globalOptions.position;
        /**
         * Debounce interval for detecting changes via ResizeObserver
         */
        this.sensorDebounce = this.manager.globalOptions.sensorDebounce;
        /**
         * Whether ResizeObserver is disabled
         */
        this.sensorDisabled = this.manager.globalOptions.sensorDisabled;
        /**
         * Steam that emits when scrollbar is updated
         */
        this.updated = new EventEmitter();
        /**
         * Set of attributes added on the scrollbar wrapper
         */
        this.state = {};
        /**
         * Stream that destroys components' observables
         */
        this.destroyed = new Subject();
    }
    /**
     * @private
     * @param {?} track
     * @return {?}
     */
    getScrolledByDirection(track) {
        /** @type {?} */
        const scrollProperty = track === 'vertical' ? 'scrollTop' : 'scrollLeft';
        /** @type {?} */
        let event;
        return this.scrolled.pipe(tap((/**
         * @param {?} e
         * @return {?}
         */
        (e) => event = e)), pluck('target', scrollProperty), pairwise(), filter((/**
         * @param {?} __0
         * @return {?}
         */
        ([prev, curr]) => prev !== curr)), map((/**
         * @return {?}
         */
        () => event)));
    }
    /**
     * Update local state with each change detection
     * @private
     * @return {?}
     */
    updateState() {
        /** @type {?} */
        let verticalUsed = false;
        /** @type {?} */
        let horizontalUsed = false;
        /** @type {?} */
        let isVerticallyScrollable = false;
        /** @type {?} */
        let isHorizontallyScrollable = false;
        // Check if vertical scrollbar should be displayed
        if (this.track === 'all' || this.track === 'vertical') {
            isVerticallyScrollable = this.viewport.scrollHeight > this.viewport.clientHeight;
            verticalUsed = this.visibility === 'always' || isVerticallyScrollable;
        }
        // Check if horizontal scrollbar should be displayed
        if (this.track === 'all' || this.track === 'horizontal') {
            isHorizontallyScrollable = this.viewport.scrollWidth > this.viewport.clientWidth;
            horizontalUsed = this.visibility === 'always' || isHorizontallyScrollable;
        }
        this._updateState({
            position: this.position,
            track: this.track,
            appearance: this.appearance,
            visibility: this.visibility,
            disabled: this.disabled,
            dir: this.dir.value,
            verticalUsed,
            horizontalUsed,
            isVerticallyScrollable,
            isHorizontallyScrollable
        });
    }
    /**
     * @private
     * @param {?} state
     * @return {?}
     */
    _updateState(state) {
        this.state = Object.assign({}, this.state, state);
        this.changeDetectorRef.detectChanges();
    }
    /**
     * @param {?} hovered
     * @return {?}
     */
    setHovered(hovered) {
        this.zone.run((/**
         * @return {?}
         */
        () => this._updateState(Object.assign({}, hovered))));
    }
    /**
     * @param {?} dragging
     * @return {?}
     */
    setDragging(dragging) {
        this.zone.run((/**
         * @return {?}
         */
        () => this._updateState(Object.assign({}, dragging))));
    }
    /**
     * Set the viewport based on user choice
     * @private
     * @return {?}
     */
    setViewport() {
        if (this.customViewPort) {
            // Set the custom viewport as the scroll viewport
            this.viewport = this.customViewPort.viewPort.nativeElement;
            // In this case the default viewport and the default content wrapper will act as a mask
            this.viewportClasses = {
                'ng-scroll-offset': true,
                'ng-scroll-layer': true
            };
            this.defaultViewPort.nativeElement.firstElementChild.className = 'ng-scroll-layer';
        }
        else {
            // Set the default viewport as the scroll viewport
            this.viewport = this.defaultViewPort.nativeElement;
            this.viewportClasses = {
                'ng-scroll-offset': true,
                'ng-scroll-viewport': true,
                [this.viewClass]: true,
            };
        }
        // Check if the custom viewport has only one child and set it as the content wrapper
        if (this.viewport.firstElementChild) {
            this.contentWrapper = (/** @type {?} */ (this.viewport.firstElementChild));
            this.contentWrapper.classList.add('ng-scroll-content');
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.setViewport();
            // Initialize scroll streams
            this.scrolled = new Observable((/**
             * @param {?} observer
             * @return {?}
             */
            (observer) => fromEvent(this.viewport, 'scroll', { passive: true }).pipe(takeUntil(this.destroyed))
                .subscribe(observer)));
            this.verticalScrolled = this.getScrolledByDirection('vertical');
            this.horizontalScrolled = this.getScrolledByDirection('horizontal');
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        this.updateState();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyed.next();
        this.destroyed.complete();
    }
    /**
     * Update local state and the internal scrollbar controls
     * @return {?}
     */
    update() {
        this.updated.next();
        this.changeDetectorRef.detectChanges();
    }
    /**
     * Smooth scroll functions
     * @param {?} options
     * @return {?}
     */
    scrollTo(options) {
        return this.smoothScroll.scrollTo(this.viewport, options);
    }
    /**
     * Scroll to element by reference or selector
     * @param {?} target
     * @param {?=} options
     * @return {?}
     */
    scrollToElement(target, options) {
        return this.smoothScroll.scrollToElement(this.viewport, target, options);
    }
}
NgScrollbar.decorators = [
    { type: Component, args: [{
                selector: 'ng-scrollbar',
                exportAs: 'ngScrollbar',
                template: "<div class=\"ng-scrollbar-wrapper\" [ngAttr]=\"state\">\r\n  <div class=\"ng-scroll-viewport-wrapper\"\r\n       resizeSensor\r\n       [sensorDebounce]=\"sensorDebounce\"\r\n       [sensorDisabled]=\"sensorDisabled\">\r\n    <div #viewport\r\n         [ngClass]=\"viewportClasses\"\r\n         [style]=\"nativeScrollbarSizeFactory.nativeScrollbarSize | async | cssVariable: 'native-scrollbar-size'\">\r\n      <div>\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <ng-container *ngIf=\"!disabled\">\r\n    <scrollbar-control *ngIf=\"state.verticalUsed\"\r\n                       track=\"vertical\"\r\n                       [attr.scrollable]=\"state.isVerticallyScrollable\"\r\n                       [attr.fit]=\"state.horizontalUsed\">\r\n    </scrollbar-control>\r\n    <scrollbar-control *ngIf=\"state.horizontalUsed\"\r\n                       track=\"horizontal\"\r\n                       [attr.scrollable]=\"state.isHorizontallyScrollable\"\r\n                       [attr.fit]=\"state.verticalUsed\">\r\n    </scrollbar-control>\r\n  </ng-container>\r\n</div>\r\n\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: { '[class.ng-scrollbar]': 'true' },
                styles: ["::ng-deep .ng-scrollbar-measure{left:0;overflow:scroll;position:fixed;top:-9999px}:host{--scrollbar-border-radius:7px;--scrollbar-padding:4px;--scrollbar-track-color:transparent;--scrollbar-thumb-color:rgba(0, 0, 0, 0.2);--scrollbar-thumb-hover-color:var(--scrollbar-thumb-color);--scrollbar-size:5px;--scrollbar-hover-size:var(--scrollbar-size);display:block;position:relative;height:100%}:host>.ng-scrollbar-wrapper{--scrollbar-total-size:calc(var(--scrollbar-size) + var(--scrollbar-padding) * 2);--vertical-scrollbar-size:var(--scrollbar-size);--horizontal-scrollbar-size:var(--scrollbar-size);--vertical-scrollbar-total-size:calc(var(--vertical-scrollbar-size) + var(--scrollbar-padding) * 2);--horizontal-scrollbar-total-size:calc(var(--horizontal-scrollbar-size) + var(--scrollbar-padding) * 2)}:host>.ng-scrollbar-wrapper[verticalDragging=true],:host>.ng-scrollbar-wrapper[verticalHovered=true]{--vertical-scrollbar-size:var(--scrollbar-hover-size);--vertical-scrollbar-total-size:calc(var(--vertical-scrollbar-size) + var(--scrollbar-padding) * 2);cursor:default}:host>.ng-scrollbar-wrapper[horizontalDragging=true],:host>.ng-scrollbar-wrapper[horizontalHovered=true]{--horizontal-scrollbar-size:var(--scrollbar-hover-size);--horizontal-scrollbar-total-size:calc(var(--horizontal-scrollbar-size) + var(--scrollbar-padding) * 2);cursor:default}:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][verticalUsed=true][dir=ltr]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][verticalUsed=true][dir=ltr]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{padding-right:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][verticalUsed=true][dir=rtl]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][verticalUsed=true][dir=rtl]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{padding-left:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][verticalUsed=true][position=invertAll][dir=ltr]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][verticalUsed=true][position=invertAll][dir=ltr]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][verticalUsed=true][position=invertY][dir=ltr]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][verticalUsed=true][position=invertY][dir=ltr]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{padding-left:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][verticalUsed=true][position=invertAll][dir=rtl]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][verticalUsed=true][position=invertAll][dir=rtl]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][verticalUsed=true][position=invertY][dir=rtl]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][verticalUsed=true][position=invertY][dir=rtl]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{padding-right:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][horizontalUsed=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][horizontalUsed=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{padding-bottom:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][horizontalUsed=true][position=invertAll]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][horizontalUsed=true][position=invertAll]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][horizontalUsed=true][position=invertX]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[disabled=false][appearance=standard][horizontalUsed=true][position=invertX]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{padding-top:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[disabled=false][horizontalUsed=true]>.ng-scroll-viewport-wrapper>.ng-scroll-offset{bottom:var(--native-scrollbar-size)}:host>.ng-scrollbar-wrapper[disabled=false][verticalUsed=true]>.ng-scroll-viewport-wrapper>.ng-scroll-offset{left:0;right:var(--native-scrollbar-size)}:host>.ng-scrollbar-wrapper[disabled=false][verticalUsed=true][dir=rtl]>.ng-scroll-viewport-wrapper>.ng-scroll-offset{right:0;left:var(--native-scrollbar-size)}:host>.ng-scrollbar-wrapper[disabled=false][visibility=hover]>.scrollbar-control{opacity:0;transition-property:opacity;transition-duration:.4s;transition-delay:.8s}:host>.ng-scrollbar-wrapper[disabled=false][visibility=hover]:active>.scrollbar-control,:host>.ng-scrollbar-wrapper[disabled=false][visibility=hover]:focus>.scrollbar-control,:host>.ng-scrollbar-wrapper[disabled=false][visibility=hover]:hover>.scrollbar-control{opacity:1;transition-duration:.4s;transition-delay:0s}:host>.ng-scrollbar-wrapper[horizontalUsed=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[horizontalUsed=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{overflow-x:auto;overflow-y:hidden}:host>.ng-scrollbar-wrapper[verticalUsed=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[verticalUsed=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{overflow-y:auto;overflow-x:hidden}:host>.ng-scrollbar-wrapper[verticalUsed=true][horizontalUsed=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[verticalUsed=true][horizontalUsed=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{overflow:auto}.ng-scroll-viewport-wrapper{overflow:hidden}.ng-scroll-viewport{-ms-scroll-chaining:contain contain;overscroll-behavior:contain contain;-webkit-overflow-scrolling:touch;contain:strict;will-change:scroll-position}::ng-deep .ng-scroll-content{position:relative!important;display:inline-block;min-width:100%}.ng-scroll-layer,.ng-scroll-viewport-wrapper,.ng-scrollbar-wrapper,::ng-deep .ng-scroll-viewport{position:absolute;left:0;right:0;top:0;bottom:0}"]
            }] }
];
/** @nocollapse */
NgScrollbar.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: ChangeDetectorRef },
    { type: Directionality },
    { type: SmoothScrollManager },
    { type: ScrollbarManager },
    { type: NativeScrollbarSizeFactory }
];
NgScrollbar.propDecorators = {
    defaultViewPort: [{ type: ViewChild, args: ['viewport', { static: true },] }],
    customViewPort: [{ type: ContentChild, args: [ScrollViewport, { static: true },] }],
    viewClass: [{ type: Input }],
    trackClass: [{ type: Input }],
    thumbClass: [{ type: Input }],
    minThumbSize: [{ type: Input }],
    trackClickScrollDuration: [{ type: Input }],
    trackClickDisabled: [{ type: Input }],
    thumbDragDisabled: [{ type: Input }],
    disabled: [{ type: Input }],
    track: [{ type: Input }],
    visibility: [{ type: Input }],
    appearance: [{ type: Input }],
    position: [{ type: Input }],
    sensorDebounce: [{ type: Input }],
    sensorDisabled: [{ type: Input }],
    updated: [{ type: Output }]
};
if (false) {
    /**
     * Default viewport reference
     * @type {?}
     * @private
     */
    NgScrollbar.prototype.defaultViewPort;
    /**
     * Custom viewport reference
     * @type {?}
     * @private
     */
    NgScrollbar.prototype.customViewPort;
    /**
     * A class forwarded to scrollable viewport element
     * @type {?}
     */
    NgScrollbar.prototype.viewClass;
    /**
     * A class forwarded to the scrollbar track element
     * @type {?}
     */
    NgScrollbar.prototype.trackClass;
    /**
     * A class forwarded to the scrollbar thumb element
     * @type {?}
     */
    NgScrollbar.prototype.thumbClass;
    /**
     * Minimum scrollbar thumb size
     * @type {?}
     */
    NgScrollbar.prototype.minThumbSize;
    /**
     * The duration which the scrolling takes to reach its target when scrollbar rail is clicked
     * @type {?}
     */
    NgScrollbar.prototype.trackClickScrollDuration;
    /**
     * A flag used to enable/disable the scrollbar track clicked event
     * @type {?}
     */
    NgScrollbar.prototype.trackClickDisabled;
    /**
     * A flag used to enable/disable the scrollbar thumb dragged event
     * @type {?}
     */
    NgScrollbar.prototype.thumbDragDisabled;
    /**
     * Disable custom scrollbar and switch back to native scrollbar
     * @type {?}
     */
    NgScrollbar.prototype.disabled;
    /**
     * Sets the supported scroll track of the viewport, there are 3 options:
     *
     * - `vertical` Use both vertical and horizontal scrollbar
     * - `horizontal` Use both vertical and horizontal scrollbar
     * - `all` Use both vertical and horizontal scrollbar
     * @type {?}
     */
    NgScrollbar.prototype.track;
    /**
     * When to show the scrollbar, and there are 3 options:
     *
     * - `native` (default) Scrollbar will be visible when viewport is scrollable like with native scrollbar
     * - `hover` Scrollbars are hidden by default, only visible on scrolling or hovering
     * - `always` Scrollbars are always shown even if the viewport is not scrollable
     * @type {?}
     */
    NgScrollbar.prototype.visibility;
    /**
     *  Sets the appearance of the scrollbar, there are 2 options:
     *
     * - `standard` (default) scrollbar space will be reserved just like with native scrollbar.
     * - `compact` scrollbar doesn't reserve any space, they are placed over the viewport.
     * @type {?}
     */
    NgScrollbar.prototype.appearance;
    /**
     * Sets the position of each scrollbar, there are 4 options:
     *
     * - `native` (Default) Use the default position like in native scrollbar.
     * - `invertY` Inverts vertical scrollbar position
     * - `invertX` Inverts Horizontal scrollbar position
     * - `invertAll` Inverts both scrollbar positions
     * @type {?}
     */
    NgScrollbar.prototype.position;
    /**
     * Debounce interval for detecting changes via ResizeObserver
     * @type {?}
     */
    NgScrollbar.prototype.sensorDebounce;
    /**
     * Whether ResizeObserver is disabled
     * @type {?}
     */
    NgScrollbar.prototype.sensorDisabled;
    /**
     * Steam that emits when scrollbar is updated
     * @type {?}
     */
    NgScrollbar.prototype.updated;
    /**
     * Viewport Element
     * @type {?}
     */
    NgScrollbar.prototype.viewport;
    /**
     * Content Wrapper element
     * @type {?}
     */
    NgScrollbar.prototype.contentWrapper;
    /**
     * stream that emits on scroll event
     * @type {?}
     */
    NgScrollbar.prototype.scrolled;
    /**
     * Steam that emits scroll event for vertical scrollbar
     * @type {?}
     */
    NgScrollbar.prototype.verticalScrolled;
    /**
     * Steam that emits scroll event for horizontal scrollbar
     * @type {?}
     */
    NgScrollbar.prototype.horizontalScrolled;
    /**
     * Default viewport classes
     * @type {?}
     */
    NgScrollbar.prototype.viewportClasses;
    /**
     * Set of attributes added on the scrollbar wrapper
     * @type {?}
     */
    NgScrollbar.prototype.state;
    /**
     * Stream that destroys components' observables
     * @type {?}
     * @private
     */
    NgScrollbar.prototype.destroyed;
    /**
     * @type {?}
     * @private
     */
    NgScrollbar.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgScrollbar.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    NgScrollbar.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NgScrollbar.prototype.dir;
    /**
     * @type {?}
     * @private
     */
    NgScrollbar.prototype.smoothScroll;
    /** @type {?} */
    NgScrollbar.prototype.manager;
    /** @type {?} */
    NgScrollbar.prototype.nativeScrollbarSizeFactory;
}
/**
 * @record
 */
function ScrollbarDragging() { }
if (false) {
    /** @type {?|undefined} */
    ScrollbarDragging.prototype.verticalDragging;
    /** @type {?|undefined} */
    ScrollbarDragging.prototype.horizontalDragging;
}
/**
 * @record
 */
function ScrollbarHovered() { }
if (false) {
    /** @type {?|undefined} */
    ScrollbarHovered.prototype.verticalHovered;
    /** @type {?|undefined} */
    ScrollbarHovered.prototype.horizontalHovered;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2Nyb2xsYmFyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNjcm9sbGJhci8iLCJzb3VyY2VzIjpbImxpYi9uZy1zY3JvbGxiYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFDTixTQUFTLEVBQ1QsWUFBWSxFQUlaLE1BQU0sRUFDTixVQUFVLEVBQ1YsWUFBWSxFQUNaLGlCQUFpQixFQUNqQix1QkFBdUIsRUFDeEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFZLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUF1QixtQkFBbUIsRUFBeUIsTUFBTSw2QkFBNkIsQ0FBQztBQUk5RyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQVVuRixNQUFNLE9BQU8sV0FBVzs7Ozs7Ozs7OztJQTRFdEIsWUFBb0IsRUFBYyxFQUNkLElBQVksRUFDWixpQkFBb0MsRUFDcEMsR0FBbUIsRUFDbkIsWUFBaUMsRUFDbEMsT0FBeUIsRUFDekIsMEJBQXNEO1FBTnJELE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ1osc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyxRQUFHLEdBQUgsR0FBRyxDQUFnQjtRQUNuQixpQkFBWSxHQUFaLFlBQVksQ0FBcUI7UUFDbEMsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUFDekIsK0JBQTBCLEdBQTFCLDBCQUEwQixDQUE0Qjs7OztRQTVFaEUsY0FBUyxHQUFXLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQzs7OztRQUV6RCxlQUFVLEdBQVcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDOzs7O1FBRTNELGVBQVUsR0FBVyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7Ozs7UUFFM0QsaUJBQVksR0FBVyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7Ozs7UUFFL0QsNkJBQXdCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUM7Ozs7UUFFL0UsdUJBQWtCLEdBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUM7Ozs7UUFFNUUsc0JBQWlCLEdBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7Ozs7UUFFMUUsYUFBUSxHQUFZLEtBQUssQ0FBQzs7Ozs7Ozs7UUFRMUIsVUFBSyxHQUFtQixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7Ozs7Ozs7O1FBUXpELGVBQVUsR0FBd0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDOzs7Ozs7O1FBT3hFLGVBQVUsR0FBd0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDOzs7Ozs7Ozs7UUFTeEUsYUFBUSxHQUFzQixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7Ozs7UUFFbEUsbUJBQWMsR0FBVyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUM7Ozs7UUFFbkUsbUJBQWMsR0FBWSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUM7Ozs7UUFFbkUsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7Ozs7UUFjN0MsVUFBSyxHQUFxQixFQUFFLENBQUM7Ozs7UUFFckIsY0FBUyxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUFTeEMsQ0FBQzs7Ozs7O0lBRU8sc0JBQXNCLENBQUMsS0FBcUI7O2NBQzVDLGNBQWMsR0FBVyxLQUFLLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFlBQVk7O1lBQzVFLEtBQVU7UUFDZCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUN2QixHQUFHOzs7O1FBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUMsRUFDMUIsS0FBSyxDQUFDLFFBQVEsRUFBRSxjQUFjLENBQUMsRUFDL0IsUUFBUSxFQUFFLEVBQ1YsTUFBTTs7OztRQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUMsRUFDdkMsR0FBRzs7O1FBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFDLENBQ2pCLENBQUM7SUFDSixDQUFDOzs7Ozs7SUFLTyxXQUFXOztZQUNiLFlBQVksR0FBWSxLQUFLOztZQUM3QixjQUFjLEdBQVksS0FBSzs7WUFDL0Isc0JBQXNCLEdBQVksS0FBSzs7WUFDdkMsd0JBQXdCLEdBQVksS0FBSztRQUU3QyxrREFBa0Q7UUFDbEQsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFVBQVUsRUFBRTtZQUNyRCxzQkFBc0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQztZQUNqRixZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsS0FBSyxRQUFRLElBQUksc0JBQXNCLENBQUM7U0FDdkU7UUFDRCxvREFBb0Q7UUFDcEQsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFlBQVksRUFBRTtZQUN2RCx3QkFBd0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztZQUNqRixjQUFjLEdBQUcsSUFBSSxDQUFDLFVBQVUsS0FBSyxRQUFRLElBQUksd0JBQXdCLENBQUM7U0FDM0U7UUFFRCxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQ2hCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSztZQUNuQixZQUFZO1lBQ1osY0FBYztZQUNkLHNCQUFzQjtZQUN0Qix3QkFBd0I7U0FDekIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7O0lBRU8sWUFBWSxDQUFDLEtBQXVCO1FBQzFDLElBQUksQ0FBQyxLQUFLLHFCQUFRLElBQUksQ0FBQyxLQUFLLEVBQUssS0FBSyxDQUFFLENBQUM7UUFDekMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pDLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLE9BQXlCO1FBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRzs7O1FBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksbUJBQU0sT0FBTyxFQUFHLEVBQUMsQ0FBQztJQUN6RCxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxRQUEyQjtRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUc7OztRQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLG1CQUFNLFFBQVEsRUFBRyxFQUFDLENBQUM7SUFDMUQsQ0FBQzs7Ozs7O0lBS08sV0FBVztRQUNqQixJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDdkIsaURBQWlEO1lBQ2pELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDO1lBQzNELHVGQUF1RjtZQUN2RixJQUFJLENBQUMsZUFBZSxHQUFHO2dCQUNyQixrQkFBa0IsRUFBRSxJQUFJO2dCQUN4QixpQkFBaUIsRUFBRSxJQUFJO2FBQ3hCLENBQUM7WUFDRixJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEdBQUcsaUJBQWlCLENBQUM7U0FDcEY7YUFBTTtZQUNMLGtEQUFrRDtZQUNsRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDO1lBQ25ELElBQUksQ0FBQyxlQUFlLEdBQUc7Z0JBQ3JCLGtCQUFrQixFQUFFLElBQUk7Z0JBQ3hCLG9CQUFvQixFQUFFLElBQUk7Z0JBQzFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUk7YUFDdkIsQ0FBQztTQUNIO1FBQ0Qsb0ZBQW9GO1FBQ3BGLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRTtZQUNuQyxJQUFJLENBQUMsY0FBYyxHQUFHLG1CQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQWUsQ0FBQztZQUNyRSxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztTQUN4RDtJQUNILENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUI7OztRQUFDLEdBQUcsRUFBRTtZQUMvQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFFbkIsNEJBQTRCO1lBQzVCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxVQUFVOzs7O1lBQUMsQ0FBQyxRQUF1QixFQUFFLEVBQUUsQ0FDekQsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7aUJBQ2xGLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBQyxDQUFDO1lBRTFCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDaEUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN0RSxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBS0QsTUFBTTtRQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pDLENBQUM7Ozs7OztJQU1ELFFBQVEsQ0FBQyxPQUE4QjtRQUNyQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDNUQsQ0FBQzs7Ozs7OztJQUtELGVBQWUsQ0FBQyxNQUEyQixFQUFFLE9BQVE7UUFDbkQsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzRSxDQUFDOzs7WUFqT0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxjQUFjO2dCQUN4QixRQUFRLEVBQUUsYUFBYTtnQkFDdkIsc21DQUFnQztnQkFFaEMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLElBQUksRUFBRSxFQUFFLHNCQUFzQixFQUFFLE1BQU0sRUFBRTs7YUFDekM7Ozs7WUF2QkMsVUFBVTtZQURWLE1BQU07WUFHTixpQkFBaUI7WUFHVixjQUFjO1lBSU8sbUJBQW1CO1lBSXhDLGdCQUFnQjtZQUNoQiwwQkFBMEI7Ozs4QkFZaEMsU0FBUyxTQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7NkJBRXRDLFlBQVksU0FBQyxjQUFjLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO3dCQUU3QyxLQUFLO3lCQUVMLEtBQUs7eUJBRUwsS0FBSzsyQkFFTCxLQUFLO3VDQUVMLEtBQUs7aUNBRUwsS0FBSztnQ0FFTCxLQUFLO3VCQUVMLEtBQUs7b0JBUUwsS0FBSzt5QkFRTCxLQUFLO3lCQU9MLEtBQUs7dUJBU0wsS0FBSzs2QkFFTCxLQUFLOzZCQUVMLEtBQUs7c0JBRUwsTUFBTTs7Ozs7Ozs7SUF4RFAsc0NBQTBGOzs7Ozs7SUFFMUYscUNBQXVGOzs7OztJQUV2RixnQ0FBa0U7Ozs7O0lBRWxFLGlDQUFvRTs7Ozs7SUFFcEUsaUNBQW9FOzs7OztJQUVwRSxtQ0FBd0U7Ozs7O0lBRXhFLCtDQUF3Rjs7Ozs7SUFFeEYseUNBQXFGOzs7OztJQUVyRix3Q0FBbUY7Ozs7O0lBRW5GLCtCQUFtQzs7Ozs7Ozs7O0lBUW5DLDRCQUFrRTs7Ozs7Ozs7O0lBUWxFLGlDQUFpRjs7Ozs7Ozs7SUFPakYsaUNBQWlGOzs7Ozs7Ozs7O0lBU2pGLCtCQUEyRTs7Ozs7SUFFM0UscUNBQTRFOzs7OztJQUU1RSxxQ0FBNkU7Ozs7O0lBRTdFLDhCQUE2Qzs7Ozs7SUFFN0MsK0JBQXNCOzs7OztJQUV0QixxQ0FBd0M7Ozs7O0lBRXhDLCtCQUEwQjs7Ozs7SUFFMUIsdUNBQWtDOzs7OztJQUVsQyx5Q0FBb0M7Ozs7O0lBRXBDLHNDQUFxQjs7Ozs7SUFFckIsNEJBQTZCOzs7Ozs7SUFFN0IsZ0NBQXdDOzs7OztJQUU1Qix5QkFBc0I7Ozs7O0lBQ3RCLDJCQUFvQjs7Ozs7SUFDcEIsd0NBQTRDOzs7OztJQUM1QywwQkFBMkI7Ozs7O0lBQzNCLG1DQUF5Qzs7SUFDekMsOEJBQWdDOztJQUNoQyxpREFBNkQ7Ozs7O0FBMkkzRSxnQ0FHQzs7O0lBRkMsNkNBQTJCOztJQUMzQiwrQ0FBNkI7Ozs7O0FBRy9CLCtCQUdDOzs7SUFGQywyQ0FBMEI7O0lBQzFCLDZDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50LFxyXG4gIElucHV0LFxyXG4gIE91dHB1dCxcclxuICBWaWV3Q2hpbGQsXHJcbiAgQ29udGVudENoaWxkLFxyXG4gIE9uSW5pdCxcclxuICBBZnRlclZpZXdDaGVja2VkLFxyXG4gIE9uRGVzdHJveSxcclxuICBOZ1pvbmUsXHJcbiAgRWxlbWVudFJlZixcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3lcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGlyZWN0aW9uYWxpdHkgfSBmcm9tICdAYW5ndWxhci9jZGsvYmlkaSc7XHJcbmltcG9ydCB7IGZyb21FdmVudCwgT2JzZXJ2YWJsZSwgT2JzZXJ2ZXIsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZmlsdGVyLCBtYXAsIHBhaXJ3aXNlLCBwbHVjaywgdGFrZVVudGlsLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IFNjcm9sbFZpZXdwb3J0IH0gZnJvbSAnLi9zY3JvbGwtdmlld3BvcnQnO1xyXG5pbXBvcnQgeyBTbW9vdGhTY3JvbGxFbGVtZW50LCBTbW9vdGhTY3JvbGxNYW5hZ2VyLCBTbW9vdGhTY3JvbGxUb09wdGlvbnMgfSBmcm9tICduZ3gtc2Nyb2xsYmFyL3Ntb290aC1zY3JvbGwnO1xyXG4vLyBVbmNvbW1lbnQgdGhlIGZvbGxvd2luZyBsaW5lIGluIGRldmVsb3BtZW50IG1vZGVcclxuLy8gaW1wb3J0IHsgU21vb3RoU2Nyb2xsRWxlbWVudCwgU21vb3RoU2Nyb2xsTWFuYWdlciwgU21vb3RoU2Nyb2xsVG9PcHRpb25zIH0gZnJvbSAnLi4vLi4vc21vb3RoLXNjcm9sbC9zcmMvcHVibGljX2FwaSc7XHJcbmltcG9ydCB7IFNjcm9sbGJhckFwcGVhcmFuY2UsIFNjcm9sbGJhclRyYWNrLCBTY3JvbGxiYXJQb3NpdGlvbiwgU2Nyb2xsYmFyVmlzaWJpbGl0eSwgTmdTY3JvbGxiYXJTdGF0ZSB9IGZyb20gJy4vbmctc2Nyb2xsYmFyLm1vZGVsJztcclxuaW1wb3J0IHsgU2Nyb2xsYmFyTWFuYWdlciB9IGZyb20gJy4vdXRpbHMvc2Nyb2xsYmFyLW1hbmFnZXInO1xyXG5pbXBvcnQgeyBOYXRpdmVTY3JvbGxiYXJTaXplRmFjdG9yeSB9IGZyb20gJy4vdXRpbHMvbmF0aXZlLXNjcm9sbGJhci1zaXplLWZhY3RvcnknO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZy1zY3JvbGxiYXInLFxyXG4gIGV4cG9ydEFzOiAnbmdTY3JvbGxiYXInLFxyXG4gIHRlbXBsYXRlVXJsOiAnbmctc2Nyb2xsYmFyLmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWyduZy1zY3JvbGxiYXIuc2NzcyddLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIGhvc3Q6IHsgJ1tjbGFzcy5uZy1zY3JvbGxiYXJdJzogJ3RydWUnIH1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5nU2Nyb2xsYmFyIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdDaGVja2VkLCBPbkRlc3Ryb3kge1xyXG4gIC8qKiBEZWZhdWx0IHZpZXdwb3J0IHJlZmVyZW5jZSAqL1xyXG4gIEBWaWV3Q2hpbGQoJ3ZpZXdwb3J0JywgeyBzdGF0aWM6IHRydWUgfSkgcHJpdmF0ZSBkZWZhdWx0Vmlld1BvcnQ6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xyXG4gIC8qKiBDdXN0b20gdmlld3BvcnQgcmVmZXJlbmNlICovXHJcbiAgQENvbnRlbnRDaGlsZChTY3JvbGxWaWV3cG9ydCwgeyBzdGF0aWM6IHRydWUgfSkgcHJpdmF0ZSBjdXN0b21WaWV3UG9ydDogU2Nyb2xsVmlld3BvcnQ7XHJcbiAgLyoqIEEgY2xhc3MgZm9yd2FyZGVkIHRvIHNjcm9sbGFibGUgdmlld3BvcnQgZWxlbWVudCAqL1xyXG4gIEBJbnB1dCgpIHZpZXdDbGFzczogc3RyaW5nID0gdGhpcy5tYW5hZ2VyLmdsb2JhbE9wdGlvbnMudmlld0NsYXNzO1xyXG4gIC8qKiBBIGNsYXNzIGZvcndhcmRlZCB0byB0aGUgc2Nyb2xsYmFyIHRyYWNrIGVsZW1lbnQgKi9cclxuICBASW5wdXQoKSB0cmFja0NsYXNzOiBzdHJpbmcgPSB0aGlzLm1hbmFnZXIuZ2xvYmFsT3B0aW9ucy50cmFja0NsYXNzO1xyXG4gIC8qKiBBIGNsYXNzIGZvcndhcmRlZCB0byB0aGUgc2Nyb2xsYmFyIHRodW1iIGVsZW1lbnQgKi9cclxuICBASW5wdXQoKSB0aHVtYkNsYXNzOiBzdHJpbmcgPSB0aGlzLm1hbmFnZXIuZ2xvYmFsT3B0aW9ucy50aHVtYkNsYXNzO1xyXG4gIC8qKiBNaW5pbXVtIHNjcm9sbGJhciB0aHVtYiBzaXplICovXHJcbiAgQElucHV0KCkgbWluVGh1bWJTaXplOiBudW1iZXIgPSB0aGlzLm1hbmFnZXIuZ2xvYmFsT3B0aW9ucy5taW5UaHVtYlNpemU7XHJcbiAgLyoqIFRoZSBkdXJhdGlvbiB3aGljaCB0aGUgc2Nyb2xsaW5nIHRha2VzIHRvIHJlYWNoIGl0cyB0YXJnZXQgd2hlbiBzY3JvbGxiYXIgcmFpbCBpcyBjbGlja2VkICovXHJcbiAgQElucHV0KCkgdHJhY2tDbGlja1Njcm9sbER1cmF0aW9uID0gdGhpcy5tYW5hZ2VyLmdsb2JhbE9wdGlvbnMudHJhY2tDbGlja1Njcm9sbER1cmF0aW9uO1xyXG4gIC8qKiBBIGZsYWcgdXNlZCB0byBlbmFibGUvZGlzYWJsZSB0aGUgc2Nyb2xsYmFyIHRyYWNrIGNsaWNrZWQgZXZlbnQgKi9cclxuICBASW5wdXQoKSB0cmFja0NsaWNrRGlzYWJsZWQ6IGJvb2xlYW4gPSB0aGlzLm1hbmFnZXIuZ2xvYmFsT3B0aW9ucy50cmFja0NsaWNrRGlzYWJsZWQ7XHJcbiAgLyoqIEEgZmxhZyB1c2VkIHRvIGVuYWJsZS9kaXNhYmxlIHRoZSBzY3JvbGxiYXIgdGh1bWIgZHJhZ2dlZCBldmVudCAqL1xyXG4gIEBJbnB1dCgpIHRodW1iRHJhZ0Rpc2FibGVkOiBib29sZWFuID0gdGhpcy5tYW5hZ2VyLmdsb2JhbE9wdGlvbnMudGh1bWJEcmFnRGlzYWJsZWQ7XHJcbiAgLyoqIERpc2FibGUgY3VzdG9tIHNjcm9sbGJhciBhbmQgc3dpdGNoIGJhY2sgdG8gbmF0aXZlIHNjcm9sbGJhciAqL1xyXG4gIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgLyoqXHJcbiAgICogU2V0cyB0aGUgc3VwcG9ydGVkIHNjcm9sbCB0cmFjayBvZiB0aGUgdmlld3BvcnQsIHRoZXJlIGFyZSAzIG9wdGlvbnM6XHJcbiAgICpcclxuICAgKiAtIGB2ZXJ0aWNhbGAgVXNlIGJvdGggdmVydGljYWwgYW5kIGhvcml6b250YWwgc2Nyb2xsYmFyXHJcbiAgICogLSBgaG9yaXpvbnRhbGAgVXNlIGJvdGggdmVydGljYWwgYW5kIGhvcml6b250YWwgc2Nyb2xsYmFyXHJcbiAgICogLSBgYWxsYCBVc2UgYm90aCB2ZXJ0aWNhbCBhbmQgaG9yaXpvbnRhbCBzY3JvbGxiYXJcclxuICAgKi9cclxuICBASW5wdXQoKSB0cmFjazogU2Nyb2xsYmFyVHJhY2sgPSB0aGlzLm1hbmFnZXIuZ2xvYmFsT3B0aW9ucy50cmFjaztcclxuICAvKipcclxuICAgKiBXaGVuIHRvIHNob3cgdGhlIHNjcm9sbGJhciwgYW5kIHRoZXJlIGFyZSAzIG9wdGlvbnM6XHJcbiAgICpcclxuICAgKiAtIGBuYXRpdmVgIChkZWZhdWx0KSBTY3JvbGxiYXIgd2lsbCBiZSB2aXNpYmxlIHdoZW4gdmlld3BvcnQgaXMgc2Nyb2xsYWJsZSBsaWtlIHdpdGggbmF0aXZlIHNjcm9sbGJhclxyXG4gICAqIC0gYGhvdmVyYCBTY3JvbGxiYXJzIGFyZSBoaWRkZW4gYnkgZGVmYXVsdCwgb25seSB2aXNpYmxlIG9uIHNjcm9sbGluZyBvciBob3ZlcmluZ1xyXG4gICAqIC0gYGFsd2F5c2AgU2Nyb2xsYmFycyBhcmUgYWx3YXlzIHNob3duIGV2ZW4gaWYgdGhlIHZpZXdwb3J0IGlzIG5vdCBzY3JvbGxhYmxlXHJcbiAgICovXHJcbiAgQElucHV0KCkgdmlzaWJpbGl0eTogU2Nyb2xsYmFyVmlzaWJpbGl0eSA9IHRoaXMubWFuYWdlci5nbG9iYWxPcHRpb25zLnZpc2liaWxpdHk7XHJcbiAgLyoqXHJcbiAgICogIFNldHMgdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIHNjcm9sbGJhciwgdGhlcmUgYXJlIDIgb3B0aW9uczpcclxuICAgKlxyXG4gICAqIC0gYHN0YW5kYXJkYCAoZGVmYXVsdCkgc2Nyb2xsYmFyIHNwYWNlIHdpbGwgYmUgcmVzZXJ2ZWQganVzdCBsaWtlIHdpdGggbmF0aXZlIHNjcm9sbGJhci5cclxuICAgKiAtIGBjb21wYWN0YCBzY3JvbGxiYXIgZG9lc24ndCByZXNlcnZlIGFueSBzcGFjZSwgdGhleSBhcmUgcGxhY2VkIG92ZXIgdGhlIHZpZXdwb3J0LlxyXG4gICAqL1xyXG4gIEBJbnB1dCgpIGFwcGVhcmFuY2U6IFNjcm9sbGJhckFwcGVhcmFuY2UgPSB0aGlzLm1hbmFnZXIuZ2xvYmFsT3B0aW9ucy5hcHBlYXJhbmNlO1xyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIHBvc2l0aW9uIG9mIGVhY2ggc2Nyb2xsYmFyLCB0aGVyZSBhcmUgNCBvcHRpb25zOlxyXG4gICAqXHJcbiAgICogLSBgbmF0aXZlYCAoRGVmYXVsdCkgVXNlIHRoZSBkZWZhdWx0IHBvc2l0aW9uIGxpa2UgaW4gbmF0aXZlIHNjcm9sbGJhci5cclxuICAgKiAtIGBpbnZlcnRZYCBJbnZlcnRzIHZlcnRpY2FsIHNjcm9sbGJhciBwb3NpdGlvblxyXG4gICAqIC0gYGludmVydFhgIEludmVydHMgSG9yaXpvbnRhbCBzY3JvbGxiYXIgcG9zaXRpb25cclxuICAgKiAtIGBpbnZlcnRBbGxgIEludmVydHMgYm90aCBzY3JvbGxiYXIgcG9zaXRpb25zXHJcbiAgICovXHJcbiAgQElucHV0KCkgcG9zaXRpb246IFNjcm9sbGJhclBvc2l0aW9uID0gdGhpcy5tYW5hZ2VyLmdsb2JhbE9wdGlvbnMucG9zaXRpb247XHJcbiAgLyoqIERlYm91bmNlIGludGVydmFsIGZvciBkZXRlY3RpbmcgY2hhbmdlcyB2aWEgUmVzaXplT2JzZXJ2ZXIgKi9cclxuICBASW5wdXQoKSBzZW5zb3JEZWJvdW5jZTogbnVtYmVyID0gdGhpcy5tYW5hZ2VyLmdsb2JhbE9wdGlvbnMuc2Vuc29yRGVib3VuY2U7XHJcbiAgLyoqIFdoZXRoZXIgUmVzaXplT2JzZXJ2ZXIgaXMgZGlzYWJsZWQgKi9cclxuICBASW5wdXQoKSBzZW5zb3JEaXNhYmxlZDogYm9vbGVhbiA9IHRoaXMubWFuYWdlci5nbG9iYWxPcHRpb25zLnNlbnNvckRpc2FibGVkO1xyXG4gIC8qKiBTdGVhbSB0aGF0IGVtaXRzIHdoZW4gc2Nyb2xsYmFyIGlzIHVwZGF0ZWQgKi9cclxuICBAT3V0cHV0KCkgdXBkYXRlZCA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuICAvKiogVmlld3BvcnQgRWxlbWVudCAqL1xyXG4gIHZpZXdwb3J0OiBIVE1MRWxlbWVudDtcclxuICAvKiogQ29udGVudCBXcmFwcGVyIGVsZW1lbnQgKi9cclxuICBjb250ZW50V3JhcHBlcjogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XHJcbiAgLyoqIHN0cmVhbSB0aGF0IGVtaXRzIG9uIHNjcm9sbCBldmVudCAqL1xyXG4gIHNjcm9sbGVkOiBPYnNlcnZhYmxlPGFueT47XHJcbiAgLyoqIFN0ZWFtIHRoYXQgZW1pdHMgc2Nyb2xsIGV2ZW50IGZvciB2ZXJ0aWNhbCBzY3JvbGxiYXIgKi9cclxuICB2ZXJ0aWNhbFNjcm9sbGVkOiBPYnNlcnZhYmxlPGFueT47XHJcbiAgLyoqIFN0ZWFtIHRoYXQgZW1pdHMgc2Nyb2xsIGV2ZW50IGZvciBob3Jpem9udGFsIHNjcm9sbGJhciAqL1xyXG4gIGhvcml6b250YWxTY3JvbGxlZDogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gIC8qKiBEZWZhdWx0IHZpZXdwb3J0IGNsYXNzZXMgKi9cclxuICB2aWV3cG9ydENsYXNzZXM6IGFueTtcclxuICAvKiogU2V0IG9mIGF0dHJpYnV0ZXMgYWRkZWQgb24gdGhlIHNjcm9sbGJhciB3cmFwcGVyICovXHJcbiAgc3RhdGU6IE5nU2Nyb2xsYmFyU3RhdGUgPSB7fTtcclxuICAvKiogU3RyZWFtIHRoYXQgZGVzdHJveXMgY29tcG9uZW50cycgb2JzZXJ2YWJsZXMgKi9cclxuICBwcml2YXRlIGRlc3Ryb3llZCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSB6b25lOiBOZ1pvbmUsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBkaXI6IERpcmVjdGlvbmFsaXR5LFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgc21vb3RoU2Nyb2xsOiBTbW9vdGhTY3JvbGxNYW5hZ2VyLFxyXG4gICAgICAgICAgICAgIHB1YmxpYyBtYW5hZ2VyOiBTY3JvbGxiYXJNYW5hZ2VyLFxyXG4gICAgICAgICAgICAgIHB1YmxpYyBuYXRpdmVTY3JvbGxiYXJTaXplRmFjdG9yeTogTmF0aXZlU2Nyb2xsYmFyU2l6ZUZhY3RvcnkpIHtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0U2Nyb2xsZWRCeURpcmVjdGlvbih0cmFjazogU2Nyb2xsYmFyVHJhY2spIHtcclxuICAgIGNvbnN0IHNjcm9sbFByb3BlcnR5OiBzdHJpbmcgPSB0cmFjayA9PT0gJ3ZlcnRpY2FsJyA/ICdzY3JvbGxUb3AnIDogJ3Njcm9sbExlZnQnO1xyXG4gICAgbGV0IGV2ZW50OiBhbnk7XHJcbiAgICByZXR1cm4gdGhpcy5zY3JvbGxlZC5waXBlKFxyXG4gICAgICB0YXAoKGU6IGFueSkgPT4gZXZlbnQgPSBlKSxcclxuICAgICAgcGx1Y2soJ3RhcmdldCcsIHNjcm9sbFByb3BlcnR5KSxcclxuICAgICAgcGFpcndpc2UoKSxcclxuICAgICAgZmlsdGVyKChbcHJldiwgY3Vycl0pID0+IHByZXYgIT09IGN1cnIpLFxyXG4gICAgICBtYXAoKCkgPT4gZXZlbnQpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlIGxvY2FsIHN0YXRlIHdpdGggZWFjaCBjaGFuZ2UgZGV0ZWN0aW9uXHJcbiAgICovXHJcbiAgcHJpdmF0ZSB1cGRhdGVTdGF0ZSgpIHtcclxuICAgIGxldCB2ZXJ0aWNhbFVzZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIGxldCBob3Jpem9udGFsVXNlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgbGV0IGlzVmVydGljYWxseVNjcm9sbGFibGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIGxldCBpc0hvcml6b250YWxseVNjcm9sbGFibGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvLyBDaGVjayBpZiB2ZXJ0aWNhbCBzY3JvbGxiYXIgc2hvdWxkIGJlIGRpc3BsYXllZFxyXG4gICAgaWYgKHRoaXMudHJhY2sgPT09ICdhbGwnIHx8IHRoaXMudHJhY2sgPT09ICd2ZXJ0aWNhbCcpIHtcclxuICAgICAgaXNWZXJ0aWNhbGx5U2Nyb2xsYWJsZSA9IHRoaXMudmlld3BvcnQuc2Nyb2xsSGVpZ2h0ID4gdGhpcy52aWV3cG9ydC5jbGllbnRIZWlnaHQ7XHJcbiAgICAgIHZlcnRpY2FsVXNlZCA9IHRoaXMudmlzaWJpbGl0eSA9PT0gJ2Fsd2F5cycgfHwgaXNWZXJ0aWNhbGx5U2Nyb2xsYWJsZTtcclxuICAgIH1cclxuICAgIC8vIENoZWNrIGlmIGhvcml6b250YWwgc2Nyb2xsYmFyIHNob3VsZCBiZSBkaXNwbGF5ZWRcclxuICAgIGlmICh0aGlzLnRyYWNrID09PSAnYWxsJyB8fCB0aGlzLnRyYWNrID09PSAnaG9yaXpvbnRhbCcpIHtcclxuICAgICAgaXNIb3Jpem9udGFsbHlTY3JvbGxhYmxlID0gdGhpcy52aWV3cG9ydC5zY3JvbGxXaWR0aCA+IHRoaXMudmlld3BvcnQuY2xpZW50V2lkdGg7XHJcbiAgICAgIGhvcml6b250YWxVc2VkID0gdGhpcy52aXNpYmlsaXR5ID09PSAnYWx3YXlzJyB8fCBpc0hvcml6b250YWxseVNjcm9sbGFibGU7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fdXBkYXRlU3RhdGUoe1xyXG4gICAgICBwb3NpdGlvbjogdGhpcy5wb3NpdGlvbixcclxuICAgICAgdHJhY2s6IHRoaXMudHJhY2ssXHJcbiAgICAgIGFwcGVhcmFuY2U6IHRoaXMuYXBwZWFyYW5jZSxcclxuICAgICAgdmlzaWJpbGl0eTogdGhpcy52aXNpYmlsaXR5LFxyXG4gICAgICBkaXNhYmxlZDogdGhpcy5kaXNhYmxlZCxcclxuICAgICAgZGlyOiB0aGlzLmRpci52YWx1ZSxcclxuICAgICAgdmVydGljYWxVc2VkLFxyXG4gICAgICBob3Jpem9udGFsVXNlZCxcclxuICAgICAgaXNWZXJ0aWNhbGx5U2Nyb2xsYWJsZSxcclxuICAgICAgaXNIb3Jpem9udGFsbHlTY3JvbGxhYmxlXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX3VwZGF0ZVN0YXRlKHN0YXRlOiBOZ1Njcm9sbGJhclN0YXRlKSB7XHJcbiAgICB0aGlzLnN0YXRlID0geyAuLi50aGlzLnN0YXRlLCAuLi5zdGF0ZSB9O1xyXG4gICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgfVxyXG5cclxuICBzZXRIb3ZlcmVkKGhvdmVyZWQ6IFNjcm9sbGJhckhvdmVyZWQpIHtcclxuICAgIHRoaXMuem9uZS5ydW4oKCkgPT4gdGhpcy5fdXBkYXRlU3RhdGUoeyAuLi5ob3ZlcmVkIH0pKTtcclxuICB9XHJcblxyXG4gIHNldERyYWdnaW5nKGRyYWdnaW5nOiBTY3JvbGxiYXJEcmFnZ2luZykge1xyXG4gICAgdGhpcy56b25lLnJ1bigoKSA9PiB0aGlzLl91cGRhdGVTdGF0ZSh7IC4uLmRyYWdnaW5nIH0pKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB0aGUgdmlld3BvcnQgYmFzZWQgb24gdXNlciBjaG9pY2VcclxuICAgKi9cclxuICBwcml2YXRlIHNldFZpZXdwb3J0KCkge1xyXG4gICAgaWYgKHRoaXMuY3VzdG9tVmlld1BvcnQpIHtcclxuICAgICAgLy8gU2V0IHRoZSBjdXN0b20gdmlld3BvcnQgYXMgdGhlIHNjcm9sbCB2aWV3cG9ydFxyXG4gICAgICB0aGlzLnZpZXdwb3J0ID0gdGhpcy5jdXN0b21WaWV3UG9ydC52aWV3UG9ydC5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAvLyBJbiB0aGlzIGNhc2UgdGhlIGRlZmF1bHQgdmlld3BvcnQgYW5kIHRoZSBkZWZhdWx0IGNvbnRlbnQgd3JhcHBlciB3aWxsIGFjdCBhcyBhIG1hc2tcclxuICAgICAgdGhpcy52aWV3cG9ydENsYXNzZXMgPSB7XHJcbiAgICAgICAgJ25nLXNjcm9sbC1vZmZzZXQnOiB0cnVlLFxyXG4gICAgICAgICduZy1zY3JvbGwtbGF5ZXInOiB0cnVlXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuZGVmYXVsdFZpZXdQb3J0Lm5hdGl2ZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQuY2xhc3NOYW1lID0gJ25nLXNjcm9sbC1sYXllcic7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBTZXQgdGhlIGRlZmF1bHQgdmlld3BvcnQgYXMgdGhlIHNjcm9sbCB2aWV3cG9ydFxyXG4gICAgICB0aGlzLnZpZXdwb3J0ID0gdGhpcy5kZWZhdWx0Vmlld1BvcnQubmF0aXZlRWxlbWVudDtcclxuICAgICAgdGhpcy52aWV3cG9ydENsYXNzZXMgPSB7XHJcbiAgICAgICAgJ25nLXNjcm9sbC1vZmZzZXQnOiB0cnVlLFxyXG4gICAgICAgICduZy1zY3JvbGwtdmlld3BvcnQnOiB0cnVlLFxyXG4gICAgICAgIFt0aGlzLnZpZXdDbGFzc106IHRydWUsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvLyBDaGVjayBpZiB0aGUgY3VzdG9tIHZpZXdwb3J0IGhhcyBvbmx5IG9uZSBjaGlsZCBhbmQgc2V0IGl0IGFzIHRoZSBjb250ZW50IHdyYXBwZXJcclxuICAgIGlmICh0aGlzLnZpZXdwb3J0LmZpcnN0RWxlbWVudENoaWxkKSB7XHJcbiAgICAgIHRoaXMuY29udGVudFdyYXBwZXIgPSB0aGlzLnZpZXdwb3J0LmZpcnN0RWxlbWVudENoaWxkIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyLmNsYXNzTGlzdC5hZGQoJ25nLXNjcm9sbC1jb250ZW50Jyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0Vmlld3BvcnQoKTtcclxuXHJcbiAgICAgIC8vIEluaXRpYWxpemUgc2Nyb2xsIHN0cmVhbXNcclxuICAgICAgdGhpcy5zY3JvbGxlZCA9IG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcjogT2JzZXJ2ZXI8YW55PikgPT5cclxuICAgICAgICBmcm9tRXZlbnQodGhpcy52aWV3cG9ydCwgJ3Njcm9sbCcsIHsgcGFzc2l2ZTogdHJ1ZSB9KS5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3llZCkpXHJcbiAgICAgICAgICAuc3Vic2NyaWJlKG9ic2VydmVyKSk7XHJcblxyXG4gICAgICB0aGlzLnZlcnRpY2FsU2Nyb2xsZWQgPSB0aGlzLmdldFNjcm9sbGVkQnlEaXJlY3Rpb24oJ3ZlcnRpY2FsJyk7XHJcbiAgICAgIHRoaXMuaG9yaXpvbnRhbFNjcm9sbGVkID0gdGhpcy5nZXRTY3JvbGxlZEJ5RGlyZWN0aW9uKCdob3Jpem9udGFsJyk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpIHtcclxuICAgIHRoaXMudXBkYXRlU3RhdGUoKTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgdGhpcy5kZXN0cm95ZWQubmV4dCgpO1xyXG4gICAgdGhpcy5kZXN0cm95ZWQuY29tcGxldGUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZSBsb2NhbCBzdGF0ZSBhbmQgdGhlIGludGVybmFsIHNjcm9sbGJhciBjb250cm9sc1xyXG4gICAqL1xyXG4gIHVwZGF0ZSgpIHtcclxuICAgIHRoaXMudXBkYXRlZC5uZXh0KCk7XHJcbiAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNtb290aCBzY3JvbGwgZnVuY3Rpb25zXHJcbiAgICovXHJcblxyXG4gIHNjcm9sbFRvKG9wdGlvbnM6IFNtb290aFNjcm9sbFRvT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc21vb3RoU2Nyb2xsLnNjcm9sbFRvKHRoaXMudmlld3BvcnQsIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2Nyb2xsIHRvIGVsZW1lbnQgYnkgcmVmZXJlbmNlIG9yIHNlbGVjdG9yXHJcbiAgICovXHJcbiAgc2Nyb2xsVG9FbGVtZW50KHRhcmdldDogU21vb3RoU2Nyb2xsRWxlbWVudCwgb3B0aW9ucz8pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybiB0aGlzLnNtb290aFNjcm9sbC5zY3JvbGxUb0VsZW1lbnQodGhpcy52aWV3cG9ydCwgdGFyZ2V0LCBvcHRpb25zKTtcclxuICB9XHJcbn1cclxuXHJcblxyXG5pbnRlcmZhY2UgU2Nyb2xsYmFyRHJhZ2dpbmcge1xyXG4gIHZlcnRpY2FsRHJhZ2dpbmc/OiBib29sZWFuO1xyXG4gIGhvcml6b250YWxEcmFnZ2luZz86IGJvb2xlYW47XHJcbn1cclxuXHJcbmludGVyZmFjZSBTY3JvbGxiYXJIb3ZlcmVkIHtcclxuICB2ZXJ0aWNhbEhvdmVyZWQ/OiBib29sZWFuO1xyXG4gIGhvcml6b250YWxIb3ZlcmVkPzogYm9vbGVhbjtcclxufVxyXG4iXX0=