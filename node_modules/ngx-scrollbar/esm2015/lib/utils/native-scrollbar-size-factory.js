/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Platform } from '@angular/cdk/platform';
import { BehaviorSubject, fromEvent, of } from 'rxjs';
import { debounceTime, tap, switchMap } from 'rxjs/operators';
import { ScrollbarManager } from './scrollbar-manager';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./scrollbar-manager";
import * as i3 from "@angular/cdk/platform";
export class NativeScrollbarSizeFactory {
    /**
     * @param {?} document
     * @param {?} manager
     * @param {?} platform
     */
    constructor(document, manager, platform) {
        this.document = document;
        this.manager = manager;
        this.platform = platform;
        if (platform.isBrowser) {
            of(null).pipe(tap((/**
             * @return {?}
             */
            () => this._nativeScrollbarSize = new BehaviorSubject(this.getNativeScrollbarSize()))), tap((/**
             * @return {?}
             */
            () => this.nativeScrollbarSize = this._nativeScrollbarSize.asObservable())), switchMap((/**
             * @return {?}
             */
            () => fromEvent(this.document.defaultView, 'resize', { passive: true }))), debounceTime(this.manager.globalOptions.windowResizeDebounce), tap((/**
             * @return {?}
             */
            () => this._nativeScrollbarSize.next(this.getNativeScrollbarSize())))).subscribe();
        }
    }
    /**
     * Get native scrollbar size
     * @private
     * @return {?}
     */
    getNativeScrollbarSize() {
        if (this.platform.ANDROID || this.platform.IOS) {
            return 6;
        }
        /** @type {?} */
        const box = this.document.createElement('div');
        box.className = 'ng-scrollbar-measure';
        this.document.body.appendChild(box);
        /** @type {?} */
        const size = box.getBoundingClientRect().right;
        this.document.body.removeChild(box);
        // if size is 0, return 15 (for MAC OS browsers)
        return size || 15;
    }
}
NativeScrollbarSizeFactory.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
NativeScrollbarSizeFactory.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ScrollbarManager },
    { type: Platform }
];
/** @nocollapse */ NativeScrollbarSizeFactory.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NativeScrollbarSizeFactory_Factory() { return new NativeScrollbarSizeFactory(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i2.ScrollbarManager), i0.ɵɵinject(i3.Platform)); }, token: NativeScrollbarSizeFactory, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NativeScrollbarSizeFactory.prototype._nativeScrollbarSize;
    /** @type {?} */
    NativeScrollbarSizeFactory.prototype.nativeScrollbarSize;
    /**
     * @type {?}
     * @private
     */
    NativeScrollbarSizeFactory.prototype.document;
    /**
     * @type {?}
     * @private
     */
    NativeScrollbarSizeFactory.prototype.manager;
    /**
     * @type {?}
     * @private
     */
    NativeScrollbarSizeFactory.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLXNjcm9sbGJhci1zaXplLWZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL25hdGl2ZS1zY3JvbGxiYXItc2l6ZS1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2pELE9BQU8sRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsRSxPQUFPLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7Ozs7QUFHdkQsTUFBTSxPQUFPLDBCQUEwQjs7Ozs7O0lBSXJDLFlBQXNDLFFBQWEsRUFDL0IsT0FBeUIsRUFDekIsUUFBa0I7UUFGQSxhQUFRLEdBQVIsUUFBUSxDQUFLO1FBQy9CLFlBQU8sR0FBUCxPQUFPLENBQWtCO1FBQ3pCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDcEMsSUFBSSxRQUFRLENBQUMsU0FBUyxFQUFFO1lBQ3RCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQ1gsR0FBRzs7O1lBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksZUFBZSxDQUFTLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLEVBQUMsRUFDakcsR0FBRzs7O1lBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsRUFBQyxFQUM5RSxTQUFTOzs7WUFBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUMsRUFDbEYsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLEVBQzdELEdBQUc7OztZQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUMsRUFBQyxDQUN6RSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ2Y7SUFDSCxDQUFDOzs7Ozs7SUFLTyxzQkFBc0I7UUFDNUIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUM5QyxPQUFPLENBQUMsQ0FBQztTQUNWOztjQUNLLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7UUFDOUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxzQkFBc0IsQ0FBQztRQUN2QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7O2NBQzlCLElBQUksR0FBRyxHQUFHLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxLQUFLO1FBQzlDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQyxnREFBZ0Q7UUFDaEQsT0FBTyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQ3BCLENBQUM7OztZQWpDRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7OzRDQUtuQixNQUFNLFNBQUMsUUFBUTtZQVByQixnQkFBZ0I7WUFIaEIsUUFBUTs7Ozs7Ozs7SUFPZiwwREFBc0Q7O0lBQ3RELHlEQUF3Qzs7Ozs7SUFFNUIsOENBQXVDOzs7OztJQUN2Qyw2Q0FBaUM7Ozs7O0lBQ2pDLDhDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBmcm9tRXZlbnQsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgdGFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IFNjcm9sbGJhck1hbmFnZXIgfSBmcm9tICcuL3Njcm9sbGJhci1tYW5hZ2VyJztcclxuXHJcbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXHJcbmV4cG9ydCBjbGFzcyBOYXRpdmVTY3JvbGxiYXJTaXplRmFjdG9yeSB7XHJcbiAgcHJpdmF0ZSBfbmF0aXZlU2Nyb2xsYmFyU2l6ZTogQmVoYXZpb3JTdWJqZWN0PG51bWJlcj47XHJcbiAgbmF0aXZlU2Nyb2xsYmFyU2l6ZTogT2JzZXJ2YWJsZTxudW1iZXI+O1xyXG5cclxuICBjb25zdHJ1Y3RvcihASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBhbnksXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBtYW5hZ2VyOiBTY3JvbGxiYXJNYW5hZ2VyLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgcGxhdGZvcm06IFBsYXRmb3JtKSB7XHJcbiAgICBpZiAocGxhdGZvcm0uaXNCcm93c2VyKSB7XHJcbiAgICAgIG9mKG51bGwpLnBpcGUoXHJcbiAgICAgICAgdGFwKCgpID0+IHRoaXMuX25hdGl2ZVNjcm9sbGJhclNpemUgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PG51bWJlcj4odGhpcy5nZXROYXRpdmVTY3JvbGxiYXJTaXplKCkpKSxcclxuICAgICAgICB0YXAoKCkgPT4gdGhpcy5uYXRpdmVTY3JvbGxiYXJTaXplID0gdGhpcy5fbmF0aXZlU2Nyb2xsYmFyU2l6ZS5hc09ic2VydmFibGUoKSksXHJcbiAgICAgICAgc3dpdGNoTWFwKCgpID0+IGZyb21FdmVudCh0aGlzLmRvY3VtZW50LmRlZmF1bHRWaWV3LCAncmVzaXplJywgeyBwYXNzaXZlOiB0cnVlIH0pKSxcclxuICAgICAgICBkZWJvdW5jZVRpbWUodGhpcy5tYW5hZ2VyLmdsb2JhbE9wdGlvbnMud2luZG93UmVzaXplRGVib3VuY2UpLFxyXG4gICAgICAgIHRhcCgoKSA9PiB0aGlzLl9uYXRpdmVTY3JvbGxiYXJTaXplLm5leHQodGhpcy5nZXROYXRpdmVTY3JvbGxiYXJTaXplKCkpKVxyXG4gICAgICApLnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IG5hdGl2ZSBzY3JvbGxiYXIgc2l6ZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0TmF0aXZlU2Nyb2xsYmFyU2l6ZSgpOiBudW1iZXIge1xyXG4gICAgaWYgKHRoaXMucGxhdGZvcm0uQU5EUk9JRCB8fCB0aGlzLnBsYXRmb3JtLklPUykge1xyXG4gICAgICByZXR1cm4gNjtcclxuICAgIH1cclxuICAgIGNvbnN0IGJveCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBib3guY2xhc3NOYW1lID0gJ25nLXNjcm9sbGJhci1tZWFzdXJlJztcclxuICAgIHRoaXMuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChib3gpO1xyXG4gICAgY29uc3Qgc2l6ZSA9IGJveC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodDtcclxuICAgIHRoaXMuZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChib3gpO1xyXG4gICAgLy8gaWYgc2l6ZSBpcyAwLCByZXR1cm4gMTUgKGZvciBNQUMgT1MgYnJvd3NlcnMpXHJcbiAgICByZXR1cm4gc2l6ZSB8fCAxNTtcclxuICB9XHJcbn1cclxuIl19