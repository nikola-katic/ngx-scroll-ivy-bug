/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { getRtlScrollAxisType } from '@angular/cdk/platform';
import { NG_SCROLLBAR_OPTIONS } from '../ng-scrollbar.model';
import * as i0 from "@angular/core";
import * as i1 from "../ng-scrollbar.model";
/** @type {?} */
const defaultOptions = {
    viewClass: '',
    trackClass: '',
    thumbClass: '',
    track: 'vertical',
    appearance: 'compact',
    visibility: 'native',
    position: 'native',
    thumbDragDisabled: false,
    trackClickDisabled: false,
    trackClickScrollDuration: 300,
    minThumbSize: 20,
    windowResizeDebounce: 0,
    sensorDebounce: 0,
    sensorDisabled: false
};
export class ScrollbarManager {
    /**
     * @param {?} options
     */
    constructor(options) {
        this.globalOptions = options ? Object.assign({}, defaultOptions, options) : defaultOptions;
        this.rtlScrollAxisType = getRtlScrollAxisType();
    }
}
ScrollbarManager.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ScrollbarManager.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_SCROLLBAR_OPTIONS,] }] }
];
/** @nocollapse */ ScrollbarManager.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ScrollbarManager_Factory() { return new ScrollbarManager(i0.ɵɵinject(i1.NG_SCROLLBAR_OPTIONS, 8)); }, token: ScrollbarManager, providedIn: "root" });
if (false) {
    /** @type {?} */
    ScrollbarManager.prototype.globalOptions;
    /** @type {?} */
    ScrollbarManager.prototype.rtlScrollAxisType;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL3Njcm9sbGJhci1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLG9CQUFvQixFQUFxQixNQUFNLHVCQUF1QixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxvQkFBb0IsRUFBc0IsTUFBTSx1QkFBdUIsQ0FBQzs7OztNQUUzRSxjQUFjLEdBQXVCO0lBQ3pDLFNBQVMsRUFBRSxFQUFFO0lBQ2IsVUFBVSxFQUFFLEVBQUU7SUFDZCxVQUFVLEVBQUUsRUFBRTtJQUNkLEtBQUssRUFBRSxVQUFVO0lBQ2pCLFVBQVUsRUFBRSxTQUFTO0lBQ3JCLFVBQVUsRUFBRSxRQUFRO0lBQ3BCLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLGlCQUFpQixFQUFFLEtBQUs7SUFDeEIsa0JBQWtCLEVBQUUsS0FBSztJQUN6Qix3QkFBd0IsRUFBRSxHQUFHO0lBQzdCLFlBQVksRUFBRSxFQUFFO0lBQ2hCLG9CQUFvQixFQUFFLENBQUM7SUFDdkIsY0FBYyxFQUFFLENBQUM7SUFDakIsY0FBYyxFQUFFLEtBQUs7Q0FDdEI7QUFHRCxNQUFNLE9BQU8sZ0JBQWdCOzs7O0lBSzNCLFlBQXNELE9BQTJCO1FBQy9FLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLENBQUMsbUJBQU0sY0FBYyxFQUFLLE9BQU8sRUFBRyxDQUFDLENBQUMsY0FBYyxDQUFDO1FBRWxGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxvQkFBb0IsRUFBRSxDQUFDO0lBQ2xELENBQUM7OztZQVZGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7Ozs7NENBTW5CLFFBQVEsWUFBSSxNQUFNLFNBQUMsb0JBQW9COzs7OztJQUpwRCx5Q0FBMkM7O0lBRTNDLDZDQUE4QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgZ2V0UnRsU2Nyb2xsQXhpc1R5cGUsIFJ0bFNjcm9sbEF4aXNUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcclxuaW1wb3J0IHsgTkdfU0NST0xMQkFSX09QVElPTlMsIE5nU2Nyb2xsYmFyT3B0aW9ucyB9IGZyb20gJy4uL25nLXNjcm9sbGJhci5tb2RlbCc7XHJcblxyXG5jb25zdCBkZWZhdWx0T3B0aW9uczogTmdTY3JvbGxiYXJPcHRpb25zID0ge1xyXG4gIHZpZXdDbGFzczogJycsXHJcbiAgdHJhY2tDbGFzczogJycsXHJcbiAgdGh1bWJDbGFzczogJycsXHJcbiAgdHJhY2s6ICd2ZXJ0aWNhbCcsXHJcbiAgYXBwZWFyYW5jZTogJ2NvbXBhY3QnLFxyXG4gIHZpc2liaWxpdHk6ICduYXRpdmUnLFxyXG4gIHBvc2l0aW9uOiAnbmF0aXZlJyxcclxuICB0aHVtYkRyYWdEaXNhYmxlZDogZmFsc2UsXHJcbiAgdHJhY2tDbGlja0Rpc2FibGVkOiBmYWxzZSxcclxuICB0cmFja0NsaWNrU2Nyb2xsRHVyYXRpb246IDMwMCxcclxuICBtaW5UaHVtYlNpemU6IDIwLFxyXG4gIHdpbmRvd1Jlc2l6ZURlYm91bmNlOiAwLFxyXG4gIHNlbnNvckRlYm91bmNlOiAwLFxyXG4gIHNlbnNvckRpc2FibGVkOiBmYWxzZVxyXG59O1xyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIFNjcm9sbGJhck1hbmFnZXIge1xyXG4gIHJlYWRvbmx5IGdsb2JhbE9wdGlvbnM6IE5nU2Nyb2xsYmFyT3B0aW9ucztcclxuXHJcbiAgcmVhZG9ubHkgcnRsU2Nyb2xsQXhpc1R5cGU6IFJ0bFNjcm9sbEF4aXNUeXBlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KE5HX1NDUk9MTEJBUl9PUFRJT05TKSBvcHRpb25zOiBOZ1Njcm9sbGJhck9wdGlvbnMpIHtcclxuICAgIHRoaXMuZ2xvYmFsT3B0aW9ucyA9IG9wdGlvbnMgPyB7IC4uLmRlZmF1bHRPcHRpb25zLCAuLi5vcHRpb25zIH0gOiBkZWZhdWx0T3B0aW9ucztcclxuXHJcbiAgICB0aGlzLnJ0bFNjcm9sbEF4aXNUeXBlID0gZ2V0UnRsU2Nyb2xsQXhpc1R5cGUoKTtcclxuICB9XHJcbn1cclxuIl19