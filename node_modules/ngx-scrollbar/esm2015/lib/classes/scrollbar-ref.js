/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { animationFrameScheduler, asyncScheduler, EMPTY, fromEvent, merge, of, Subject } from 'rxjs';
import { distinctUntilChanged, map, mergeMap, pluck, switchMap, takeUntil, tap } from 'rxjs/operators';
/**
 * @abstract
 */
export class ScrollbarRef {
    /**
     * @protected
     * @param {?} scrollbarRef
     * @param {?} document
     * @param {?} trackRef
     * @param {?} thumbRef
     * @param {?} platform
     * @param {?} destroyed
     */
    constructor(scrollbarRef, document, trackRef, thumbRef, platform, destroyed) {
        this.scrollbarRef = scrollbarRef;
        this.document = document;
        this.destroyed = destroyed;
        this.viewElement = scrollbarRef.viewport;
        this.trackElement = trackRef.nativeElement;
        this.thumbElement = thumbRef.nativeElement;
        if (!(platform.IOS || platform.ANDROID)) {
            this.pointerEvents = new Subject();
            this.hoveredState = new Subject();
            this.draggingState = new Subject();
            this.draggingState.pipe(distinctUntilChanged(), tap((/**
             * @param {?} state
             * @return {?}
             */
            (state) => this.setDragging(state))), takeUntil(this.destroyed)).subscribe();
            /** @type {?} */
            const scrollbarClicked = fromEvent(this.viewElement, 'mousedown', { passive: true }).pipe(switchMap((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                e.stopPropagation();
                this.document.onselectstart = (/**
                 * @return {?}
                 */
                () => false);
                /** @type {?} */
                const isThumbClick = isWithinBounds(e, this.thumbElement.getBoundingClientRect());
                if (isThumbClick && !coerceBooleanProperty(this.scrollbarRef.thumbDragDisabled)) {
                    return this.dragged(e);
                }
                else {
                    /** @type {?} */
                    const isTrackClick = isWithinBounds(e, this.trackElement.getBoundingClientRect());
                    if (isTrackClick && !coerceBooleanProperty(this.scrollbarRef.trackClickDisabled)) {
                        return this.trackClicked(e);
                    }
                }
                return EMPTY;
            })));
            // Activate/Deactivate scrollbar hover event
            /** @type {?} */
            const mouseLeave = fromEvent(this.viewElement, 'mouseleave').pipe(map((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                e.stopPropagation();
                return false;
            })));
            merge(this.pointerEvents, mouseLeave).pipe(distinctUntilChanged()).pipe(tap((/**
             * @param {?} state
             * @return {?}
             */
            (state) => this.setHovered(state))), takeUntil(this.destroyed)).subscribe();
            // Activate/Deactivate scrollTo on scrollbar click event
            this.pointerEvents.pipe(distinctUntilChanged(), switchMap((/**
             * @param {?} state
             * @return {?}
             */
            (state) => state ? scrollbarClicked : EMPTY)), takeUntil(this.destroyed)).subscribe();
            this.hovered().pipe(tap((/**
             * @param {?} state
             * @return {?}
             */
            (state) => this.pointerEvents.next(state))), takeUntil(this.destroyed)).subscribe();
        }
        // Start updating thumb position when view scrolls
        this.scrolled().pipe(tap((/**
         * @return {?}
         */
        () => this.updateThumb())), takeUntil(this.destroyed)).subscribe();
        // Update scrollbar when `NgScrollbar.update()` is called
        this.scrollbarRef.updated.pipe(tap((/**
         * @return {?}
         */
        () => this.updateThumb())), takeUntil(this.destroyed)).subscribe();
        // Initialize scrollbar
        asyncScheduler.schedule((/**
         * @return {?}
         */
        () => this.updateThumb()), 100);
    }
    // The available scrollable size
    /**
     * @protected
     * @return {?}
     */
    get scrollMax() {
        return this.scrollSize - this.viewportSize;
    }
    /**
     * @protected
     * @return {?}
     */
    get trackMax() {
        return this.trackSize - this.thumbSize;
    }
    /**
     * Updates scrollbar's thumb position and size
     * @protected
     * @return {?}
     */
    updateThumb() {
        /** @type {?} */
        const trackMax = this.trackMax;
        /** @type {?} */
        const size = calculateThumbSize(this.trackSize, this.scrollSize, this.scrollbarRef.minThumbSize);
        /** @type {?} */
        const position = calculateThumbPosition(this.scrollOffset, this.scrollMax, trackMax);
        animationFrameScheduler.schedule((/**
         * @return {?}
         */
        () => this.applyThumbStyle(size, position, trackMax)));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dragged(event) {
        /** @type {?} */
        let trackMax;
        /** @type {?} */
        let scrollMax;
        /** @type {?} */
        const dragStart = of(event).pipe(tap((/**
         * @return {?}
         */
        () => {
            // Capture scrollMax and trackMax once
            trackMax = this.trackMax;
            scrollMax = this.scrollMax;
            this.draggingState.next(true);
        })));
        /** @type {?} */
        const dragging = fromEvent(this.document, 'mousemove', { capture: true, passive: true }).pipe(tap((/**
         * @param {?} e
         * @return {?}
         */
        (e) => e.stopPropagation())));
        /** @type {?} */
        const dragEnd = fromEvent(this.document, 'mouseup', { capture: true }).pipe(tap((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.stopPropagation();
            this.document.onselectstart = null;
            this.draggingState.next(false);
        })));
        return dragStart.pipe(pluck(this.pageProperty), map((/**
         * @param {?} pageOffset
         * @return {?}
         */
        (pageOffset) => pageOffset - this.dragStartOffset)), mergeMap((/**
         * @param {?} mouseDownOffset
         * @return {?}
         */
        (mouseDownOffset) => dragging.pipe(pluck(this.clientProperty), 
        // Calculate how far the user's mouse is from the top/left of the scrollbar (minus the dragOffset).
        map((/**
         * @param {?} mouseOffset
         * @return {?}
         */
        (mouseOffset) => mouseOffset - this.dragOffset)), map((/**
         * @param {?} offset
         * @return {?}
         */
        (offset) => scrollMax * (offset - mouseDownOffset) / trackMax)), map((/**
         * @param {?} position
         * @return {?}
         */
        (position) => this.handleDragPosition(position, scrollMax))), tap((/**
         * @param {?} value
         * @return {?}
         */
        (value) => this.scrollTo(value))), takeUntil(dragEnd)))));
    }
    /**
     * Stream that emits when a scrollbar is hovered
     * @private
     * @return {?}
     */
    hovered() {
        return fromEvent(this.viewElement, 'mousemove', { passive: true }).pipe(map((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.stopPropagation();
            return isWithinBounds(e, this.trackElement.getBoundingClientRect());
        })));
    }
    /**
     * Stream that emits when scrollbar track is clicked
     * @protected
     * @param {?} e
     * @return {?}
     */
    trackClicked(e) {
        return of(e).pipe(pluck(this.pageProperty), map((/**
         * @param {?} pageOffset
         * @return {?}
         */
        (pageOffset) => pageOffset - this.dragOffset)), map((/**
         * @param {?} clickOffset
         * @return {?}
         */
        (clickOffset) => {
            /** @type {?} */
            const offset = clickOffset - (this.thumbSize / 2);
            /** @type {?} */
            const ratio = offset / this.trackSize;
            return ratio * this.scrollSize;
        })), tap((/**
         * @param {?} value
         * @return {?}
         */
        (value) => this.scrollbarRef.scrollTo(Object.assign({}, this.mapToScrollToOption(value), { duration: coerceNumberProperty(this.scrollbarRef.trackClickScrollDuration) })))), tap((/**
         * @return {?}
         */
        () => this.document.onselectstart = null)));
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.viewElement;
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.trackElement;
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.thumbElement;
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.hoveredState;
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.draggingState;
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.pointerEvents;
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.scrollbarRef;
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.document;
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.destroyed;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.scrollSize = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.viewportSize = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.trackSize = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.thumbSize = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.scrollOffset = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.dragStartOffset = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.dragOffset = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.pageProperty = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.clientProperty = function () { };
    /**
     * Stream that emits when view is scrolled
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.scrolled = function () { };
    /**
     * Return a scrollTo option parameter
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    ScrollbarRef.prototype.mapToScrollToOption = function (value) { };
    /**
     * Updates scrollbar's thumb size and position
     * @abstract
     * @protected
     * @param {?} size
     * @param {?} position
     * @param {?=} trackMax
     * @return {?}
     */
    ScrollbarRef.prototype.applyThumbStyle = function (size, position, trackMax) { };
    /**
     * On drag function
     * @abstract
     * @protected
     * @param {?} position
     * @param {?} scrollMax
     * @return {?}
     */
    ScrollbarRef.prototype.handleDragPosition = function (position, scrollMax) { };
    /**
     * @abstract
     * @protected
     * @param {?} point
     * @return {?}
     */
    ScrollbarRef.prototype.scrollTo = function (point) { };
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    ScrollbarRef.prototype.setDragging = function (value) { };
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    ScrollbarRef.prototype.setHovered = function (value) { };
}
/**
 * Calculate Scrollbar thumb size
 * @param {?} trackSize Scrollbar track size
 * @param {?} contentSize Content size or Viewport scroll size
 * @param {?} minThumbSize Minimum scrollbar thumb size
 * @return {?}
 */
function calculateThumbSize(trackSize, contentSize, minThumbSize) {
    /** @type {?} */
    const scrollbarRatio = trackSize / contentSize;
    /** @type {?} */
    const thumbSize = scrollbarRatio * trackSize;
    return Math.max(~~thumbSize, minThumbSize);
}
/**
 * Calculate scrollbar thumb position
 * @param {?} scrollPosition The scroll position of the viewport
 * @param {?} scrollMax The max size available to scroll the viewport
 * @param {?} trackMax The max size available to move scrollbar thumb
 * @return {?}
 */
function calculateThumbPosition(scrollPosition, scrollMax, trackMax) {
    return scrollPosition * trackMax / scrollMax;
}
/**
 * Check if pointer is within scrollbar bounds
 * @param {?} e Pointer event
 * @param {?} rect Scrollbar Client Rect
 * @return {?}
 */
function isWithinBounds(e, rect) {
    return (e.clientX >= rect.left &&
        e.clientX <= rect.left + rect.width &&
        e.clientY >= rect.top &&
        e.clientY <= rect.top + rect.height);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLXJlZi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zY3JvbGxiYXIvIiwic291cmNlcyI6WyJsaWIvY2xhc3Nlcy9zY3JvbGxiYXItcmVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFjLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakgsT0FBTyxFQUFFLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFJdkcsTUFBTSxPQUFnQixZQUFZOzs7Ozs7Ozs7O0lBdUNoQyxZQUFnQyxZQUF5QixFQUN6QixRQUFhLEVBQ3ZCLFFBQW9CLEVBQ3BCLFFBQW9CLEVBQ3BCLFFBQWtCLEVBQ1IsU0FBd0I7UUFMeEIsaUJBQVksR0FBWixZQUFZLENBQWE7UUFDekIsYUFBUSxHQUFSLFFBQVEsQ0FBSztRQUliLGNBQVMsR0FBVCxTQUFTLENBQWU7UUFDdEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQztRQUMzQyxJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUM7UUFFM0MsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFFdkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO1lBQzVDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztZQUMzQyxJ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Ozs7O0lBS3ZFLGlGQUE0Rjs7Ozs7Ozs7O0lBSzVGLCtFQUFtRjs7Ozs7OztJQUVuRix1REFBaUQ7Ozs7Ozs7SUFFakQsMERBQXFEOzs7Ozs7O0lBRXJELHlEQUFvRDs7Ozs7Ozs7O0FBU3RELFNBQVMsa0JBQWtCLENBQUMsU0FBaUIsRUFBRSxXQUFtQixFQUFFLFlBQW9COztVQUNoRixjQUFjLEdBQUcsU0FBUyxHQUFHLFdBQVc7O1VBQ3hDLFNBQVMsR0FBRyxjQUFjLEdBQUcsU0FBUztJQUM1QyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUM3QyxDQUFDOzs7Ozs7OztBQVFELFNBQVMsc0JBQXNCLENBQUMsY0FBc0IsRUFBRSxTQUFpQixFQUFFLFFBQWdCO0lBQ3pGLE9BQU8sY0FBYyxHQUFHLFFBQVEsR0FBRyxTQUFTLENBQUM7QUFDL0MsQ0FBQzs7Ozs7OztBQU9ELFNBQVMsY0FBYyxDQUFDLENBQU0sRUFBRSxJQUFnQjtJQUM5QyxPQUFPLENBQ0wsQ0FBQyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSTtRQUN0QixDQUFDLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUs7UUFDbkMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsR0FBRztRQUNyQixDQUFDLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FDcEMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcclxuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5LCBjb2VyY2VOdW1iZXJQcm9wZXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XHJcbmltcG9ydCB7IGFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyLCBhc3luY1NjaGVkdWxlciwgRU1QVFksIGZyb21FdmVudCwgbWVyZ2UsIE9ic2VydmFibGUsIG9mLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIG1lcmdlTWFwLCBwbHVjaywgc3dpdGNoTWFwLCB0YWtlVW50aWwsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IE5nU2Nyb2xsYmFyIH0gZnJvbSAnLi4vbmctc2Nyb2xsYmFyJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTY3JvbGxiYXJSZWYge1xyXG4gIC8vIFNjcm9sbGFibGUgdmlldyBlbGVtZW50XHJcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHZpZXdFbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgdHJhY2tFbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgdGh1bWJFbGVtZW50OiBIVE1MRWxlbWVudDtcclxuXHJcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGhvdmVyZWRTdGF0ZTogU3ViamVjdDxib29sZWFuPjtcclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZHJhZ2dpbmdTdGF0ZTogU3ViamVjdDxib29sZWFuPjtcclxuXHJcbiAgLy8gUG9pbnRlciBldmVudHMgc3dpdGNoZXIgc3RyZWFtXHJcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHBvaW50ZXJFdmVudHM6IFN1YmplY3Q8Ym9vbGVhbj47XHJcblxyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBnZXQgc2Nyb2xsU2l6ZSgpOiBudW1iZXI7XHJcblxyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBnZXQgdmlld3BvcnRTaXplKCk6IG51bWJlcjtcclxuXHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IGdldCB0cmFja1NpemUoKTogbnVtYmVyO1xyXG5cclxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0IHRodW1iU2l6ZSgpOiBudW1iZXI7XHJcblxyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBnZXQgc2Nyb2xsT2Zmc2V0KCk6IG51bWJlcjtcclxuXHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IGdldCBkcmFnU3RhcnRPZmZzZXQoKTogbnVtYmVyO1xyXG5cclxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0IGRyYWdPZmZzZXQoKTogbnVtYmVyO1xyXG5cclxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0IHBhZ2VQcm9wZXJ0eSgpOiBzdHJpbmc7XHJcblxyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBnZXQgY2xpZW50UHJvcGVydHkoKTogc3RyaW5nO1xyXG5cclxuICAvLyBUaGUgYXZhaWxhYmxlIHNjcm9sbGFibGUgc2l6ZVxyXG4gIHByb3RlY3RlZCBnZXQgc2Nyb2xsTWF4KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5zY3JvbGxTaXplIC0gdGhpcy52aWV3cG9ydFNpemU7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgZ2V0IHRyYWNrTWF4KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy50cmFja1NpemUgLSB0aGlzLnRodW1iU2l6ZTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgc2Nyb2xsYmFyUmVmOiBOZ1Njcm9sbGJhcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdGVjdGVkIGRvY3VtZW50OiBhbnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrUmVmOiBFbGVtZW50UmVmLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHVtYlJlZjogRWxlbWVudFJlZixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm06IFBsYXRmb3JtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgZGVzdHJveWVkOiBTdWJqZWN0PHZvaWQ+KSB7XHJcbiAgICB0aGlzLnZpZXdFbGVtZW50ID0gc2Nyb2xsYmFyUmVmLnZpZXdwb3J0O1xyXG4gICAgdGhpcy50cmFja0VsZW1lbnQgPSB0cmFja1JlZi5uYXRpdmVFbGVtZW50O1xyXG4gICAgdGhpcy50aHVtYkVsZW1lbnQgPSB0aHVtYlJlZi5uYXRpdmVFbGVtZW50O1xyXG5cclxuICAgIGlmICghKHBsYXRmb3JtLklPUyB8fCBwbGF0Zm9ybS5BTkRST0lEKSkge1xyXG5cclxuICAgICAgdGhpcy5wb2ludGVyRXZlbnRzID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcclxuICAgICAgdGhpcy5ob3ZlcmVkU3RhdGUgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xyXG4gICAgICB0aGlzLmRyYWdnaW5nU3RhdGUgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xyXG5cclxuICAgICAgdGhpcy5kcmFnZ2luZ1N0YXRlLnBpcGUoXHJcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcclxuICAgICAgICB0YXAoKHN0YXRlOiBib29sZWFuKSA9PiB0aGlzLnNldERyYWdnaW5nKHN0YXRlKSksXHJcbiAgICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveWVkKVxyXG4gICAgICApLnN1YnNjcmliZSgpO1xyXG5cclxuICAgICAgY29uc3Qgc2Nyb2xsYmFyQ2xpY2tlZCA9IGZyb21FdmVudCh0aGlzLnZpZXdFbGVtZW50LCAnbW91c2Vkb3duJywgeyBwYXNzaXZlOiB0cnVlIH0pLnBpcGUoXHJcbiAgICAgICAgc3dpdGNoTWFwKChlOiBhbnkpID0+IHtcclxuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICB0aGlzLmRvY3VtZW50Lm9uc2VsZWN0c3RhcnQgPSAoKSA9PiBmYWxzZTtcclxuICAgICAgICAgIGNvbnN0IGlzVGh1bWJDbGljayA9IGlzV2l0aGluQm91bmRzKGUsIHRoaXMudGh1bWJFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcclxuICAgICAgICAgIGlmIChpc1RodW1iQ2xpY2sgJiYgIWNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh0aGlzLnNjcm9sbGJhclJlZi50aHVtYkRyYWdEaXNhYmxlZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHJhZ2dlZChlKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzVHJhY2tDbGljayA9IGlzV2l0aGluQm91bmRzKGUsIHRoaXMudHJhY2tFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcclxuICAgICAgICAgICAgaWYgKGlzVHJhY2tDbGljayAmJiAhY29lcmNlQm9vbGVhblByb3BlcnR5KHRoaXMuc2Nyb2xsYmFyUmVmLnRyYWNrQ2xpY2tEaXNhYmxlZCkpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy50cmFja0NsaWNrZWQoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gQWN0aXZhdGUvRGVhY3RpdmF0ZSBzY3JvbGxiYXIgaG92ZXIgZXZlbnRcclxuICAgICAgY29uc3QgbW91c2VMZWF2ZSA9IGZyb21FdmVudCh0aGlzLnZpZXdFbGVtZW50LCAnbW91c2VsZWF2ZScpLnBpcGUoXHJcbiAgICAgICAgbWFwKChlOiBhbnkpID0+IHtcclxuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuICAgICAgbWVyZ2UodGhpcy5wb2ludGVyRXZlbnRzLCBtb3VzZUxlYXZlKS5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpLnBpcGUoXHJcbiAgICAgICAgdGFwKChzdGF0ZTogYm9vbGVhbikgPT4gdGhpcy5zZXRIb3ZlcmVkKHN0YXRlKSksXHJcbiAgICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveWVkKVxyXG4gICAgICApLnN1YnNjcmliZSgpO1xyXG5cclxuICAgICAgLy8gQWN0aXZhdGUvRGVhY3RpdmF0ZSBzY3JvbGxUbyBvbiBzY3JvbGxiYXIgY2xpY2sgZXZlbnRcclxuICAgICAgdGhpcy5wb2ludGVyRXZlbnRzLnBpcGUoXHJcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcclxuICAgICAgICBzd2l0Y2hNYXAoKHN0YXRlOiBib29sZWFuKSA9PiBzdGF0ZSA/IHNjcm9sbGJhckNsaWNrZWQgOiBFTVBUWSksXHJcbiAgICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveWVkKVxyXG4gICAgICApLnN1YnNjcmliZSgpO1xyXG5cclxuICAgICAgdGhpcy5ob3ZlcmVkKCkucGlwZShcclxuICAgICAgICB0YXAoKHN0YXRlOiBib29sZWFuKSA9PiB0aGlzLnBvaW50ZXJFdmVudHMubmV4dChzdGF0ZSkpLFxyXG4gICAgICAgIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3llZClcclxuICAgICAgKS5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTdGFydCB1cGRhdGluZyB0aHVtYiBwb3NpdGlvbiB3aGVuIHZpZXcgc2Nyb2xsc1xyXG4gICAgdGhpcy5zY3JvbGxlZCgpLnBpcGUoXHJcbiAgICAgIHRhcCgoKSA9PiB0aGlzLnVwZGF0ZVRodW1iKCkpLFxyXG4gICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95ZWQpXHJcbiAgICApLnN1YnNjcmliZSgpO1xyXG5cclxuICAgIC8vIFVwZGF0ZSBzY3JvbGxiYXIgd2hlbiBgTmdTY3JvbGxiYXIudXBkYXRlKClgIGlzIGNhbGxlZFxyXG4gICAgdGhpcy5zY3JvbGxiYXJSZWYudXBkYXRlZC5waXBlKFxyXG4gICAgICB0YXAoKCkgPT4gdGhpcy51cGRhdGVUaHVtYigpKSxcclxuICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveWVkKVxyXG4gICAgKS5zdWJzY3JpYmUoKTtcclxuXHJcbiAgICAvLyBJbml0aWFsaXplIHNjcm9sbGJhclxyXG4gICAgYXN5bmNTY2hlZHVsZXIuc2NoZWR1bGUoKCkgPT4gdGhpcy51cGRhdGVUaHVtYigpLCAxMDApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlcyBzY3JvbGxiYXIncyB0aHVtYiBwb3NpdGlvbiBhbmQgc2l6ZVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCB1cGRhdGVUaHVtYigpOiB2b2lkIHtcclxuICAgIGNvbnN0IHRyYWNrTWF4ID0gdGhpcy50cmFja01heDtcclxuICAgIGNvbnN0IHNpemUgPSBjYWxjdWxhdGVUaHVtYlNpemUodGhpcy50cmFja1NpemUsIHRoaXMuc2Nyb2xsU2l6ZSwgdGhpcy5zY3JvbGxiYXJSZWYubWluVGh1bWJTaXplKTtcclxuICAgIGNvbnN0IHBvc2l0aW9uID0gY2FsY3VsYXRlVGh1bWJQb3NpdGlvbih0aGlzLnNjcm9sbE9mZnNldCwgdGhpcy5zY3JvbGxNYXgsIHRyYWNrTWF4KTtcclxuICAgIGFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyLnNjaGVkdWxlKCgpID0+IHRoaXMuYXBwbHlUaHVtYlN0eWxlKHNpemUsIHBvc2l0aW9uLCB0cmFja01heCkpO1xyXG4gIH1cclxuXHJcbiAgZHJhZ2dlZChldmVudDogYW55KSB7XHJcbiAgICBsZXQgdHJhY2tNYXg6IG51bWJlcjtcclxuICAgIGxldCBzY3JvbGxNYXg6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdCBkcmFnU3RhcnQgPSBvZihldmVudCkucGlwZShcclxuICAgICAgdGFwKCgpID0+IHtcclxuICAgICAgICAvLyBDYXB0dXJlIHNjcm9sbE1heCBhbmQgdHJhY2tNYXggb25jZVxyXG4gICAgICAgIHRyYWNrTWF4ID0gdGhpcy50cmFja01heDtcclxuICAgICAgICBzY3JvbGxNYXggPSB0aGlzLnNjcm9sbE1heDtcclxuICAgICAgICB0aGlzLmRyYWdnaW5nU3RhdGUubmV4dCh0cnVlKTtcclxuICAgICAgfSksXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGRyYWdnaW5nID0gZnJvbUV2ZW50KHRoaXMuZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB7IGNhcHR1cmU6IHRydWUsIHBhc3NpdmU6IHRydWUgfSkucGlwZShcclxuICAgICAgdGFwKChlOiBhbnkpID0+IGUuc3RvcFByb3BhZ2F0aW9uKCkpXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGRyYWdFbmQgPSBmcm9tRXZlbnQodGhpcy5kb2N1bWVudCwgJ21vdXNldXAnLCB7IGNhcHR1cmU6IHRydWUgfSkucGlwZShcclxuICAgICAgdGFwKChlOiBhbnkpID0+IHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIHRoaXMuZG9jdW1lbnQub25zZWxlY3RzdGFydCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5kcmFnZ2luZ1N0YXRlLm5leHQoZmFsc2UpO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gZHJhZ1N0YXJ0LnBpcGUoXHJcbiAgICAgIHBsdWNrKHRoaXMucGFnZVByb3BlcnR5KSxcclxuICAgICAgbWFwKChwYWdlT2Zmc2V0OiBudW1iZXIpID0+IHBhZ2VPZmZzZXQgLSB0aGlzLmRyYWdTdGFydE9mZnNldCksXHJcbiAgICAgIG1lcmdlTWFwKChtb3VzZURvd25PZmZzZXQ6IG51bWJlcikgPT4gZHJhZ2dpbmcucGlwZShcclxuICAgICAgICBwbHVjayh0aGlzLmNsaWVudFByb3BlcnR5KSxcclxuICAgICAgICAvLyBDYWxjdWxhdGUgaG93IGZhciB0aGUgdXNlcidzIG1vdXNlIGlzIGZyb20gdGhlIHRvcC9sZWZ0IG9mIHRoZSBzY3JvbGxiYXIgKG1pbnVzIHRoZSBkcmFnT2Zmc2V0KS5cclxuICAgICAgICBtYXAoKG1vdXNlT2Zmc2V0OiBudW1iZXIpID0+IG1vdXNlT2Zmc2V0IC0gdGhpcy5kcmFnT2Zmc2V0KSxcclxuICAgICAgICBtYXAoKG9mZnNldDogbnVtYmVyKSA9PiBzY3JvbGxNYXggKiAob2Zmc2V0IC0gbW91c2VEb3duT2Zmc2V0KSAvIHRyYWNrTWF4KSxcclxuICAgICAgICBtYXAoKHBvc2l0aW9uOiBudW1iZXIpID0+IHRoaXMuaGFuZGxlRHJhZ1Bvc2l0aW9uKHBvc2l0aW9uLCBzY3JvbGxNYXgpKSxcclxuICAgICAgICB0YXAoKHZhbHVlOiBudW1iZXIpID0+IHRoaXMuc2Nyb2xsVG8odmFsdWUpKSxcclxuICAgICAgICB0YWtlVW50aWwoZHJhZ0VuZClcclxuICAgICAgKSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIGEgc2Nyb2xsYmFyIGlzIGhvdmVyZWRcclxuICAgKi9cclxuICBwcml2YXRlIGhvdmVyZWQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm4gZnJvbUV2ZW50KHRoaXMudmlld0VsZW1lbnQsICdtb3VzZW1vdmUnLCB7IHBhc3NpdmU6IHRydWUgfSkucGlwZShcclxuICAgICAgbWFwKChlOiBhbnkpID0+IHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIHJldHVybiBpc1dpdGhpbkJvdW5kcyhlLCB0aGlzLnRyYWNrRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBzY3JvbGxiYXIgdHJhY2sgaXMgY2xpY2tlZFxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCB0cmFja0NsaWNrZWQoZSk6IE9ic2VydmFibGU8bnVtYmVyPiB7XHJcbiAgICByZXR1cm4gb2YoZSkucGlwZShcclxuICAgICAgcGx1Y2sodGhpcy5wYWdlUHJvcGVydHkpLFxyXG4gICAgICBtYXAoKHBhZ2VPZmZzZXQ6IG51bWJlcikgPT4gcGFnZU9mZnNldCAtIHRoaXMuZHJhZ09mZnNldCksXHJcbiAgICAgIG1hcCgoY2xpY2tPZmZzZXQ6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGNsaWNrT2Zmc2V0IC0gKHRoaXMudGh1bWJTaXplIC8gMik7XHJcbiAgICAgICAgY29uc3QgcmF0aW8gPSBvZmZzZXQgLyB0aGlzLnRyYWNrU2l6ZTtcclxuICAgICAgICByZXR1cm4gcmF0aW8gKiB0aGlzLnNjcm9sbFNpemU7XHJcbiAgICAgIH0pLFxyXG4gICAgICB0YXAoKHZhbHVlOiBudW1iZXIpID0+XHJcbiAgICAgICAgdGhpcy5zY3JvbGxiYXJSZWYuc2Nyb2xsVG8oe1xyXG4gICAgICAgICAgLi4udGhpcy5tYXBUb1Njcm9sbFRvT3B0aW9uKHZhbHVlKSxcclxuICAgICAgICAgIGR1cmF0aW9uOiBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh0aGlzLnNjcm9sbGJhclJlZi50cmFja0NsaWNrU2Nyb2xsRHVyYXRpb24pXHJcbiAgICAgICAgfSlcclxuICAgICAgKSxcclxuICAgICAgdGFwKCgpID0+IHRoaXMuZG9jdW1lbnQub25zZWxlY3RzdGFydCA9IG51bGwpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiB2aWV3IGlzIHNjcm9sbGVkXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IHNjcm9sbGVkKCk6IE9ic2VydmFibGU8YW55PjtcclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJuIGEgc2Nyb2xsVG8gb3B0aW9uIHBhcmFtZXRlclxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBtYXBUb1Njcm9sbFRvT3B0aW9uKHZhbHVlOiBudW1iZXIpOiBTY3JvbGxUb09wdGlvbnM7XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZXMgc2Nyb2xsYmFyJ3MgdGh1bWIgc2l6ZSBhbmQgcG9zaXRpb25cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgYXBwbHlUaHVtYlN0eWxlKHNpemU6IG51bWJlciwgcG9zaXRpb246IG51bWJlciwgdHJhY2tNYXg/OiBudW1iZXIpOiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBPbiBkcmFnIGZ1bmN0aW9uXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IGhhbmRsZURyYWdQb3NpdGlvbihwb3NpdGlvbjogbnVtYmVyLCBzY3JvbGxNYXg6IG51bWJlcik6IG51bWJlcjtcclxuXHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IHNjcm9sbFRvKHBvaW50OiBudW1iZXIpOiB2b2lkO1xyXG5cclxuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc2V0RHJhZ2dpbmcodmFsdWU6IGJvb2xlYW4pOiB2b2lkO1xyXG5cclxuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc2V0SG92ZXJlZCh2YWx1ZTogYm9vbGVhbik6IHZvaWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGUgU2Nyb2xsYmFyIHRodW1iIHNpemVcclxuICogQHBhcmFtIHRyYWNrU2l6ZSBTY3JvbGxiYXIgdHJhY2sgc2l6ZVxyXG4gKiBAcGFyYW0gY29udGVudFNpemUgQ29udGVudCBzaXplIG9yIFZpZXdwb3J0IHNjcm9sbCBzaXplXHJcbiAqIEBwYXJhbSBtaW5UaHVtYlNpemUgTWluaW11bSBzY3JvbGxiYXIgdGh1bWIgc2l6ZVxyXG4gKi9cclxuZnVuY3Rpb24gY2FsY3VsYXRlVGh1bWJTaXplKHRyYWNrU2l6ZTogbnVtYmVyLCBjb250ZW50U2l6ZTogbnVtYmVyLCBtaW5UaHVtYlNpemU6IG51bWJlcik6IG51bWJlciB7XHJcbiAgY29uc3Qgc2Nyb2xsYmFyUmF0aW8gPSB0cmFja1NpemUgLyBjb250ZW50U2l6ZTtcclxuICBjb25zdCB0aHVtYlNpemUgPSBzY3JvbGxiYXJSYXRpbyAqIHRyYWNrU2l6ZTtcclxuICByZXR1cm4gTWF0aC5tYXgofn50aHVtYlNpemUsIG1pblRodW1iU2l6ZSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGUgc2Nyb2xsYmFyIHRodW1iIHBvc2l0aW9uXHJcbiAqIEBwYXJhbSBzY3JvbGxQb3NpdGlvbiBUaGUgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSB2aWV3cG9ydFxyXG4gKiBAcGFyYW0gc2Nyb2xsTWF4IFRoZSBtYXggc2l6ZSBhdmFpbGFibGUgdG8gc2Nyb2xsIHRoZSB2aWV3cG9ydFxyXG4gKiBAcGFyYW0gdHJhY2tNYXggVGhlIG1heCBzaXplIGF2YWlsYWJsZSB0byBtb3ZlIHNjcm9sbGJhciB0aHVtYlxyXG4gKi9cclxuZnVuY3Rpb24gY2FsY3VsYXRlVGh1bWJQb3NpdGlvbihzY3JvbGxQb3NpdGlvbjogbnVtYmVyLCBzY3JvbGxNYXg6IG51bWJlciwgdHJhY2tNYXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgcmV0dXJuIHNjcm9sbFBvc2l0aW9uICogdHJhY2tNYXggLyBzY3JvbGxNYXg7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBwb2ludGVyIGlzIHdpdGhpbiBzY3JvbGxiYXIgYm91bmRzXHJcbiAqIEBwYXJhbSBlIFBvaW50ZXIgZXZlbnRcclxuICogQHBhcmFtIHJlY3QgU2Nyb2xsYmFyIENsaWVudCBSZWN0XHJcbiAqL1xyXG5mdW5jdGlvbiBpc1dpdGhpbkJvdW5kcyhlOiBhbnksIHJlY3Q6IENsaWVudFJlY3QpOiBib29sZWFuIHtcclxuICByZXR1cm4gKFxyXG4gICAgZS5jbGllbnRYID49IHJlY3QubGVmdCAmJlxyXG4gICAgZS5jbGllbnRYIDw9IHJlY3QubGVmdCArIHJlY3Qud2lkdGggJiZcclxuICAgIGUuY2xpZW50WSA+PSByZWN0LnRvcCAmJlxyXG4gICAgZS5jbGllbnRZIDw9IHJlY3QudG9wICsgcmVjdC5oZWlnaHRcclxuICApO1xyXG59XHJcbiJdfQ==