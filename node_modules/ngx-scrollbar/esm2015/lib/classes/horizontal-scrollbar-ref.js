/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { RtlScrollAxisType } from '@angular/cdk/platform';
import { ScrollbarRef } from './scrollbar-ref';
export class HorizontalScrollbarRef extends ScrollbarRef {
    /**
     * @param {?} scrollbarRef
     * @param {?} document
     * @param {?} trackRef
     * @param {?} thumbRef
     * @param {?} platform
     * @param {?} destroyed
     * @param {?} dir
     */
    constructor(scrollbarRef, document, trackRef, thumbRef, platform, destroyed, dir) {
        super(scrollbarRef, document, trackRef, thumbRef, platform, destroyed);
        this.scrollbarRef = scrollbarRef;
        this.document = document;
        this.platform = platform;
        this.destroyed = destroyed;
        this.dir = dir;
    }
    /**
     * @protected
     * @return {?}
     */
    get scrollSize() {
        return this.viewElement.scrollWidth;
    }
    /**
     * @protected
     * @return {?}
     */
    get viewportSize() {
        return this.viewElement.clientWidth;
    }
    /**
     * @protected
     * @return {?}
     */
    get trackSize() {
        return this.trackElement.clientWidth;
    }
    /**
     * @protected
     * @return {?}
     */
    get thumbSize() {
        return this.thumbElement.clientWidth;
    }
    /**
     * @protected
     * @return {?}
     */
    get scrollOffset() {
        return this.viewElement.scrollLeft;
    }
    /**
     * @protected
     * @return {?}
     */
    get dragOffset() {
        return this.trackElement.getBoundingClientRect().left;
    }
    /**
     * @protected
     * @return {?}
     */
    get dragStartOffset() {
        return this.thumbElement.getBoundingClientRect().left;
    }
    /**
     * @protected
     * @return {?}
     */
    get pageProperty() {
        return 'pageX';
    }
    /**
     * @protected
     * @return {?}
     */
    get clientProperty() {
        return 'clientX';
    }
    /**
     * @private
     * @param {?} position
     * @param {?} trackMax
     * @return {?}
     */
    _handleThumbPosition(position, trackMax) {
        if (this.dir.value === 'rtl') {
            if (this.scrollbarRef.manager.rtlScrollAxisType === RtlScrollAxisType.INVERTED) {
                return -position;
            }
            if (this.scrollbarRef.manager.rtlScrollAxisType === RtlScrollAxisType.NORMAL) {
                return position - trackMax;
            }
            // Keeping this as a memo
            // if (this.rtlScrollAxisType === RtlScrollAxisType.NEGATED) {
            //   return position;
            // }
        }
        return position;
    }
    /**
     * @protected
     * @param {?} position
     * @return {?}
     */
    handleDragPosition(position) {
        if (this.dir.value === 'rtl') {
            if (this.scrollbarRef.manager.rtlScrollAxisType === RtlScrollAxisType.NEGATED) {
                return position - this.scrollMax;
            }
            if (this.scrollbarRef.manager.rtlScrollAxisType === RtlScrollAxisType.INVERTED) {
                return this.scrollMax - position;
            }
            // Keeping this as a memo
            // if (this.rtlScrollAxisType === RtlScrollAxisType.NORMAL) {
            //   return position;
            // }
        }
        return position;
    }
    /**
     * @protected
     * @return {?}
     */
    scrolled() {
        return this.scrollbarRef.horizontalScrolled;
    }
    /**
     * @protected
     * @param {?} size
     * @param {?} position
     * @param {?=} trackMax
     * @return {?}
     */
    applyThumbStyle(size, position, trackMax) {
        this.thumbElement.style.width = `${size}px`;
        this.thumbElement.style.transform = `translate3d(${this._handleThumbPosition(position, trackMax)}px, 0, 0)`;
    }
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    mapToScrollToOption(value) {
        return { left: value };
    }
    /**
     * @protected
     * @param {?} point
     * @return {?}
     */
    scrollTo(point) {
        this.viewElement.scrollLeft = point;
    }
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    setHovered(value) {
        this.scrollbarRef.setHovered({ horizontalHovered: value });
    }
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    setDragging(value) {
        this.scrollbarRef.setDragging({ horizontalDragging: value });
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    HorizontalScrollbarRef.prototype.scrollbarRef;
    /**
     * @type {?}
     * @protected
     */
    HorizontalScrollbarRef.prototype.document;
    /**
     * @type {?}
     * @protected
     */
    HorizontalScrollbarRef.prototype.platform;
    /**
     * @type {?}
     * @protected
     */
    HorizontalScrollbarRef.prototype.destroyed;
    /**
     * @type {?}
     * @protected
     */
    HorizontalScrollbarRef.prototype.dir;
}
//# sourceMappingURL=data:application/json;base64,