{"version":3,"file":"smooth-scroll-manager.d.ts","sources":["/home/nikola/Documents/Repos/ivy-bug/ngx-scroll-ivy-bug/ngx-scrollbar-bug/node_modules/ngx-scrollbar/smooth-scroll/smooth-scroll-manager.d.ts"],"sourcesContent":["import { NgZone } from '@angular/core';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { _Left, _Top } from '@angular/cdk/scrolling';\r\nimport { SmoothScrollElement, SmoothScrollOptions, SmoothScrollToOptions } from './smooth-scroll.model';\r\nexport declare class SmoothScrollManager {\r\n    private _zone;\r\n    private _dir;\r\n    private _document;\r\n    private _platform;\r\n    private _defaultOptions;\r\n    private _onGoingScrolls;\r\n    private readonly _w;\r\n    /**\r\n     * Timing method\r\n     */\r\n    private readonly _now;\r\n    constructor(_zone: NgZone, _dir: Directionality, _document: any, _platform: object, customDefaultOptions: SmoothScrollToOptions);\r\n    /**\r\n     * changes scroll position inside an element\r\n     */\r\n    private _scrollElement;\r\n    /**\r\n     * Handles a given parameter of type HTMLElement, ElementRef or selector\r\n     */\r\n    private _getElement;\r\n    /**\r\n     * Initializes a destroyer stream, re-initializes it if the element is already being scrolled\r\n     */\r\n    private _initSmoothScroll;\r\n    /**\r\n     * Checks if smooth scroll has reached, cleans up the smooth scroll stream and resolves its promise\r\n     */\r\n    private _isFinished;\r\n    /**\r\n     * Terminates an ongoing smooth scroll\r\n     */\r\n    private _interrupted;\r\n    /**\r\n     * Deletes the destroyer function, runs if the smooth scroll has finished or interrupted\r\n     */\r\n    private _destroy;\r\n    /**\r\n     * A function called recursively that, given a context, steps through scrolling\r\n     */\r\n    private _step;\r\n    private _applyScrollToOptions;\r\n    /**\r\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\r\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\r\n     * left and right always refer to the left and right side of the scrolling container irrespective\r\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\r\n     * in an RTL context.\r\n     * @param scrollable element\r\n     * @param options specified the offsets to scroll to.\r\n     */\r\n    scrollTo(scrollable: SmoothScrollElement, options: SmoothScrollToOptions): Promise<void>;\r\n    /**\r\n     * Scroll to element by reference or selector\r\n     */\r\n    scrollToElement(scrollable: SmoothScrollElement, target: SmoothScrollElement, options: SmoothScrollOptions & _Top & _Left): Promise<void>;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA;"}