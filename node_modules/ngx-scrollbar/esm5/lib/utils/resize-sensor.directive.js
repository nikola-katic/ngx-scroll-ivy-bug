/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Injectable, Inject, NgZone } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Platform } from '@angular/cdk/platform';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { from, of, EMPTY, BehaviorSubject, Observable } from 'rxjs';
import { catchError, debounceTime, map, switchMap } from 'rxjs/operators';
import { NgScrollbar } from '../ng-scrollbar';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/platform";
/**
 * Factory that initialize the ResizeObserver if available in the browser
 * Otherwise, it lazy-loads the ResizeObserver polyfill
 */
var ResizeObserverFactory = /** @class */ (function () {
    function ResizeObserverFactory(document, platform) {
        this.resizeObserverSource = new BehaviorSubject(null);
        this.resizeObserverLoader = this.resizeObserverSource.asObservable();
        if (platform.isBrowser) {
            /** @type {?} */
            var resizeObserverApi = document.defaultView.ResizeObserver
                ? of(document.defaultView.ResizeObserver)
                : from(import('@juggle/resize-observer')).pipe(map((/**
                 * @param {?} module
                 * @return {?}
                 */
                function (module) { return module.ResizeObserver; })), catchError((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    console.log('Unable to load ResizeObserver polyfill', e);
                    return EMPTY;
                })));
            this.resizeObserverSource.next(resizeObserverApi);
        }
    }
    ResizeObserverFactory.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    ResizeObserverFactory.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Platform }
    ]; };
    /** @nocollapse */ ResizeObserverFactory.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ResizeObserverFactory_Factory() { return new ResizeObserverFactory(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: ResizeObserverFactory, providedIn: "root" });
    return ResizeObserverFactory;
}());
export { ResizeObserverFactory };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ResizeObserverFactory.prototype.resizeObserverSource;
    /** @type {?} */
    ResizeObserverFactory.prototype.resizeObserverLoader;
}
var ResizeSensor = /** @class */ (function () {
    function ResizeSensor(zone, platform, resizeObserverFactory, scrollbar) {
        this.zone = zone;
        this.platform = platform;
        this.resizeObserverFactory = resizeObserverFactory;
        this.scrollbar = scrollbar;
        this._disabled = false;
        this._subscription = null;
        if (!scrollbar) {
            throw new Error('[NgScrollbar Resize Sensor Directive]: Host element must be an NgScrollbar component.');
        }
    }
    Object.defineProperty(ResizeSensor.prototype, "debounce", {
        /** Debounce interval for emitting the changes. */
        get: /**
         * Debounce interval for emitting the changes.
         * @return {?}
         */
        function () {
            return this._debounce;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._debounce = coerceNumberProperty(value);
            this._subscribe();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResizeSensor.prototype, "disabled", {
        /** Whether ResizeObserver is disabled. */
        get: /**
         * Whether ResizeObserver is disabled.
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = coerceBooleanProperty(value);
            this._disabled ? this._unsubscribe() : this._subscribe();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ResizeSensor.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (!this._subscription && !this._disabled) {
            this._subscribe();
        }
    };
    /**
     * @return {?}
     */
    ResizeSensor.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._unsubscribe();
    };
    /**
     * @private
     * @param {?} ResizeObserver
     * @return {?}
     */
    ResizeSensor.prototype._createObserver = /**
     * @private
     * @param {?} ResizeObserver
     * @return {?}
     */
    function (ResizeObserver) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            _this._resizeObserver = new ResizeObserver((/**
             * @return {?}
             */
            function () { return observer.next(); }));
            _this._resizeObserver.observe(_this.scrollbar.viewport);
            if (_this.scrollbar.contentWrapper) {
                _this._resizeObserver.observe(_this.scrollbar.contentWrapper);
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ResizeSensor.prototype._subscribe = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._unsubscribe();
        if (this.platform.isBrowser) {
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this._subscription = _this.resizeObserverFactory.resizeObserverLoader.pipe(switchMap((/**
                 * @param {?} moduleObservable
                 * @return {?}
                 */
                function (moduleObservable) { return moduleObservable; })), switchMap((/**
                 * @param {?} ResizeObserver
                 * @return {?}
                 */
                function (ResizeObserver) {
                    if (ResizeObserver) {
                        /** @type {?} */
                        var stream = _this._createObserver(ResizeObserver);
                        return _this.debounce ? stream.pipe(debounceTime(_this._debounce)) : stream;
                    }
                    else {
                        return EMPTY;
                    }
                }))).subscribe((/**
                 * @return {?}
                 */
                function () { return _this.scrollbar.update(); }));
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    ResizeSensor.prototype._unsubscribe = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._resizeObserver) {
            this._resizeObserver.disconnect();
        }
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
    };
    ResizeSensor.decorators = [
        { type: Directive, args: [{ selector: '[resizeSensor]' },] }
    ];
    /** @nocollapse */
    ResizeSensor.ctorParameters = function () { return [
        { type: NgZone },
        { type: Platform },
        { type: ResizeObserverFactory },
        { type: NgScrollbar }
    ]; };
    ResizeSensor.propDecorators = {
        debounce: [{ type: Input, args: ['sensorDebounce',] }],
        disabled: [{ type: Input, args: ['sensorDisabled',] }]
    };
    return ResizeSensor;
}());
export { ResizeSensor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype._debounce;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype._subscription;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype._resizeObserver;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype.resizeObserverFactory;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype.scrollbar;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLXNlbnNvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL3Jlc2l6ZS1zZW5zb3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUErQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUcsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRixPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBMEIsTUFBTSxNQUFNLENBQUM7QUFDNUYsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7Ozs7QUFNOUM7SUFLRSwrQkFBOEIsUUFBYSxFQUFFLFFBQWtCO1FBSDlDLHlCQUFvQixHQUFHLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pELHlCQUFvQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUd2RSxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUU7O2dCQUNoQixpQkFBaUIsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLGNBQWM7Z0JBQzNELENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUM7Z0JBQ3pDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLHlC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QUMsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUU7Ozs7Z0JBaENtQyxNQUFNO2dCQUV6RSxRQUFRO2dCQWdFNEIscUJBQXFCO2dCQTVEekQsV0FBVzs7OzJCQThCakIsS0FBSyxTQUFDLGdCQUFnQjsyQkFhdEIsS0FBSyxTQUFDLGdCQUFnQjs7SUF1RXpCLG1CQUFDO0NBQUEsQUF4RkQsSUF3RkM7U0F2RlksWUFBWTs7Ozs7O0lBYXZCLGlDQUEwQjs7Ozs7SUFhMUIsaUNBQW1DOzs7OztJQUVuQyxxQ0FBa0Q7Ozs7O0lBQ2xELHVDQUE2Qjs7Ozs7SUFFakIsNEJBQW9COzs7OztJQUNwQixnQ0FBMEI7Ozs7O0lBQzFCLDZDQUFvRDs7Ozs7SUFDcEQsaUNBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgSW5qZWN0YWJsZSwgSW5qZWN0LCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3ksIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcclxuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5LCBjb2VyY2VOdW1iZXJQcm9wZXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XHJcbmltcG9ydCB7IGZyb20sIG9mLCBFTVBUWSwgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24sIE9ic2VydmVyIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGNhdGNoRXJyb3IsIGRlYm91bmNlVGltZSwgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IE5nU2Nyb2xsYmFyIH0gZnJvbSAnLi4vbmctc2Nyb2xsYmFyJztcclxuXHJcbi8qKlxyXG4gKiBGYWN0b3J5IHRoYXQgaW5pdGlhbGl6ZSB0aGUgUmVzaXplT2JzZXJ2ZXIgaWYgYXZhaWxhYmxlIGluIHRoZSBicm93c2VyXHJcbiAqIE90aGVyd2lzZSwgaXQgbGF6eS1sb2FkcyB0aGUgUmVzaXplT2JzZXJ2ZXIgcG9seWZpbGxcclxuICovXHJcbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXHJcbmV4cG9ydCBjbGFzcyBSZXNpemVPYnNlcnZlckZhY3Rvcnkge1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgcmVzaXplT2JzZXJ2ZXJTb3VyY2UgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KG51bGwpO1xyXG4gIHJlYWRvbmx5IHJlc2l6ZU9ic2VydmVyTG9hZGVyID0gdGhpcy5yZXNpemVPYnNlcnZlclNvdXJjZS5hc09ic2VydmFibGUoKTtcclxuXHJcbiAgY29uc3RydWN0b3IoQEluamVjdChET0NVTUVOVCkgZG9jdW1lbnQ6IGFueSwgcGxhdGZvcm06IFBsYXRmb3JtKSB7XHJcbiAgICBpZiAocGxhdGZvcm0uaXNCcm93c2VyKSB7XHJcbiAgICAgIGNvbnN0IHJlc2l6ZU9ic2VydmVyQXBpID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcuUmVzaXplT2JzZXJ2ZXJcclxuICAgICAgICA/IG9mKGRvY3VtZW50LmRlZmF1bHRWaWV3LlJlc2l6ZU9ic2VydmVyKVxyXG4gICAgICAgIDogZnJvbShpbXBvcnQoJ0BqdWdnbGUvcmVzaXplLW9ic2VydmVyJykpLnBpcGUoXHJcbiAgICAgICAgICBtYXAoKG1vZHVsZTogeyBSZXNpemVPYnNlcnZlcjogYW55IH0pID0+IG1vZHVsZS5SZXNpemVPYnNlcnZlciksXHJcbiAgICAgICAgICBjYXRjaEVycm9yKChlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVbmFibGUgdG8gbG9hZCBSZXNpemVPYnNlcnZlciBwb2x5ZmlsbCcsIGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gRU1QVFk7XHJcbiAgICAgICAgICB9KSk7XHJcbiAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXJTb3VyY2UubmV4dChyZXNpemVPYnNlcnZlckFwaSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbcmVzaXplU2Vuc29yXScgfSlcclxuZXhwb3J0IGNsYXNzIFJlc2l6ZVNlbnNvciBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gIC8qKiBEZWJvdW5jZSBpbnRlcnZhbCBmb3IgZW1pdHRpbmcgdGhlIGNoYW5nZXMuICovXHJcbiAgQElucHV0KCdzZW5zb3JEZWJvdW5jZScpXHJcbiAgZ2V0IGRlYm91bmNlKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGVib3VuY2U7XHJcbiAgfVxyXG5cclxuICBzZXQgZGVib3VuY2UodmFsdWU6IG51bWJlcikge1xyXG4gICAgdGhpcy5fZGVib3VuY2UgPSBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh2YWx1ZSk7XHJcbiAgICB0aGlzLl9zdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX2RlYm91bmNlOiBudW1iZXI7XHJcblxyXG4gIC8qKiBXaGV0aGVyIFJlc2l6ZU9ic2VydmVyIGlzIGRpc2FibGVkLiAqL1xyXG4gIEBJbnB1dCgnc2Vuc29yRGlzYWJsZWQnKVxyXG4gIGdldCBkaXNhYmxlZCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcclxuICB9XHJcblxyXG4gIHNldCBkaXNhYmxlZCh2YWx1ZTogYW55KSB7XHJcbiAgICB0aGlzLl9kaXNhYmxlZCA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XHJcbiAgICB0aGlzLl9kaXNhYmxlZCA/IHRoaXMuX3Vuc3Vic2NyaWJlKCkgOiB0aGlzLl9zdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX2Rpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIHByaXZhdGUgX3N1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uIHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSBfcmVzaXplT2JzZXJ2ZXI6IGFueTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB6b25lOiBOZ1pvbmUsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBwbGF0Zm9ybTogUGxhdGZvcm0sXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSByZXNpemVPYnNlcnZlckZhY3Rvcnk6IFJlc2l6ZU9ic2VydmVyRmFjdG9yeSxcclxuICAgICAgICAgICAgICBwcml2YXRlIHNjcm9sbGJhcjogTmdTY3JvbGxiYXIpIHtcclxuICAgIGlmICghc2Nyb2xsYmFyKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignW05nU2Nyb2xsYmFyIFJlc2l6ZSBTZW5zb3IgRGlyZWN0aXZlXTogSG9zdCBlbGVtZW50IG11c3QgYmUgYW4gTmdTY3JvbGxiYXIgY29tcG9uZW50LicpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xyXG4gICAgaWYgKCF0aGlzLl9zdWJzY3JpcHRpb24gJiYgIXRoaXMuX2Rpc2FibGVkKSB7XHJcbiAgICAgIHRoaXMuX3N1YnNjcmliZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLl91bnN1YnNjcmliZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfY3JlYXRlT2JzZXJ2ZXIoUmVzaXplT2JzZXJ2ZXI6IGFueSk6IE9ic2VydmFibGU8dm9pZD4ge1xyXG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcjogT2JzZXJ2ZXI8dm9pZD4pID0+IHtcclxuICAgICAgdGhpcy5fcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKCkgPT4gb2JzZXJ2ZXIubmV4dCgpKTtcclxuICAgICAgdGhpcy5fcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLnNjcm9sbGJhci52aWV3cG9ydCk7XHJcbiAgICAgIGlmICh0aGlzLnNjcm9sbGJhci5jb250ZW50V3JhcHBlcikge1xyXG4gICAgICAgIHRoaXMuX3Jlc2l6ZU9ic2VydmVyLm9ic2VydmUodGhpcy5zY3JvbGxiYXIuY29udGVudFdyYXBwZXIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX3N1YnNjcmliZSgpIHtcclxuICAgIHRoaXMuX3Vuc3Vic2NyaWJlKCk7XHJcbiAgICBpZiAodGhpcy5wbGF0Zm9ybS5pc0Jyb3dzZXIpIHtcclxuICAgICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb24gPSB0aGlzLnJlc2l6ZU9ic2VydmVyRmFjdG9yeS5yZXNpemVPYnNlcnZlckxvYWRlci5waXBlKFxyXG4gICAgICAgICAgc3dpdGNoTWFwKChtb2R1bGVPYnNlcnZhYmxlOiBPYnNlcnZhYmxlPGFueT4pID0+IG1vZHVsZU9ic2VydmFibGUpLFxyXG4gICAgICAgICAgc3dpdGNoTWFwKChSZXNpemVPYnNlcnZlcjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChSZXNpemVPYnNlcnZlcikge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IHRoaXMuX2NyZWF0ZU9ic2VydmVyKFJlc2l6ZU9ic2VydmVyKTtcclxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZWJvdW5jZSA/IHN0cmVhbS5waXBlKGRlYm91bmNlVGltZSh0aGlzLl9kZWJvdW5jZSkpIDogc3RyZWFtO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApLnN1YnNjcmliZSgoKSA9PiB0aGlzLnNjcm9sbGJhci51cGRhdGUoKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfdW5zdWJzY3JpYmUoKSB7XHJcbiAgICBpZiAodGhpcy5fcmVzaXplT2JzZXJ2ZXIpIHtcclxuICAgICAgdGhpcy5fcmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuX3N1YnNjcmlwdGlvbikge1xyXG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19