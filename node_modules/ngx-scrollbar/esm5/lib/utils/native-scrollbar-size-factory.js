/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Platform } from '@angular/cdk/platform';
import { BehaviorSubject, fromEvent, of } from 'rxjs';
import { debounceTime, tap, switchMap } from 'rxjs/operators';
import { ScrollbarManager } from './scrollbar-manager';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./scrollbar-manager";
import * as i3 from "@angular/cdk/platform";
var NativeScrollbarSizeFactory = /** @class */ (function () {
    function NativeScrollbarSizeFactory(document, manager, platform) {
        var _this = this;
        this.document = document;
        this.manager = manager;
        this.platform = platform;
        if (platform.isBrowser) {
            of(null).pipe(tap((/**
             * @return {?}
             */
            function () { return _this._nativeScrollbarSize = new BehaviorSubject(_this.getNativeScrollbarSize()); })), tap((/**
             * @return {?}
             */
            function () { return _this.nativeScrollbarSize = _this._nativeScrollbarSize.asObservable(); })), switchMap((/**
             * @return {?}
             */
            function () { return fromEvent(_this.document.defaultView, 'resize', { passive: true }); })), debounceTime(this.manager.globalOptions.windowResizeDebounce), tap((/**
             * @return {?}
             */
            function () { return _this._nativeScrollbarSize.next(_this.getNativeScrollbarSize()); }))).subscribe();
        }
    }
    /**
     * Get native scrollbar size
     */
    /**
     * Get native scrollbar size
     * @private
     * @return {?}
     */
    NativeScrollbarSizeFactory.prototype.getNativeScrollbarSize = /**
     * Get native scrollbar size
     * @private
     * @return {?}
     */
    function () {
        if (this.platform.ANDROID || this.platform.IOS) {
            return 6;
        }
        /** @type {?} */
        var box = this.document.createElement('div');
        box.className = 'ng-scrollbar-measure';
        this.document.body.appendChild(box);
        /** @type {?} */
        var size = box.getBoundingClientRect().right;
        this.document.body.removeChild(box);
        // if size is 0, return 15 (for MAC OS browsers)
        return size || 15;
    };
    NativeScrollbarSizeFactory.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    NativeScrollbarSizeFactory.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ScrollbarManager },
        { type: Platform }
    ]; };
    /** @nocollapse */ NativeScrollbarSizeFactory.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NativeScrollbarSizeFactory_Factory() { return new NativeScrollbarSizeFactory(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i2.ScrollbarManager), i0.ɵɵinject(i3.Platform)); }, token: NativeScrollbarSizeFactory, providedIn: "root" });
    return NativeScrollbarSizeFactory;
}());
export { NativeScrollbarSizeFactory };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NativeScrollbarSizeFactory.prototype._nativeScrollbarSize;
    /** @type {?} */
    NativeScrollbarSizeFactory.prototype.nativeScrollbarSize;
    /**
     * @type {?}
     * @private
     */
    NativeScrollbarSizeFactory.prototype.document;
    /**
     * @type {?}
     * @private
     */
    NativeScrollbarSizeFactory.prototype.manager;
    /**
     * @type {?}
     * @private
     */
    NativeScrollbarSizeFactory.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLXNjcm9sbGJhci1zaXplLWZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL25hdGl2ZS1zY3JvbGxiYXItc2l6ZS1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2pELE9BQU8sRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsRSxPQUFPLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7Ozs7QUFFdkQ7SUFLRSxvQ0FBc0MsUUFBYSxFQUMvQixPQUF5QixFQUN6QixRQUFrQjtRQUZ0QyxpQkFZQztRQVpxQyxhQUFRLEdBQVIsUUFBUSxDQUFLO1FBQy9CLFlBQU8sR0FBUCxPQUFPLENBQWtCO1FBQ3pCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDcEMsSUFBSSxRQUFRLENBQUMsU0FBUyxFQUFFO1lBQ3RCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQ1gsR0FBRzs7O1lBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLGVBQWUsQ0FBUyxLQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxFQUF0RixDQUFzRixFQUFDLEVBQ2pHLEdBQUc7OztZQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsbUJBQW1CLEdBQUcsS0FBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksRUFBRSxFQUFuRSxDQUFtRSxFQUFDLEVBQzlFLFNBQVM7OztZQUFDLGNBQU0sT0FBQSxTQUFTLENBQUMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQWpFLENBQWlFLEVBQUMsRUFDbEYsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLEVBQzdELEdBQUc7OztZQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLEVBQTdELENBQTZELEVBQUMsQ0FDekUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUNmO0lBQ0gsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSywyREFBc0I7Ozs7O0lBQTlCO1FBQ0UsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUM5QyxPQUFPLENBQUMsQ0FBQztTQUNWOztZQUNLLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7UUFDOUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxzQkFBc0IsQ0FBQztRQUN2QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7O1lBQzlCLElBQUksR0FBRyxHQUFHLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxLQUFLO1FBQzlDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQyxnREFBZ0Q7UUFDaEQsT0FBTyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQ3BCLENBQUM7O2dCQWpDRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7O2dEQUtuQixNQUFNLFNBQUMsUUFBUTtnQkFQckIsZ0JBQWdCO2dCQUhoQixRQUFROzs7cUNBRmpCO0NBeUNDLEFBbENELElBa0NDO1NBakNZLDBCQUEwQjs7Ozs7O0lBQ3JDLDBEQUFzRDs7SUFDdEQseURBQXdDOzs7OztJQUU1Qiw4Q0FBdUM7Ozs7O0lBQ3ZDLDZDQUFpQzs7Ozs7SUFDakMsOENBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGZyb21FdmVudCwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCB0YXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgU2Nyb2xsYmFyTWFuYWdlciB9IGZyb20gJy4vc2Nyb2xsYmFyLW1hbmFnZXInO1xyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIE5hdGl2ZVNjcm9sbGJhclNpemVGYWN0b3J5IHtcclxuICBwcml2YXRlIF9uYXRpdmVTY3JvbGxiYXJTaXplOiBCZWhhdmlvclN1YmplY3Q8bnVtYmVyPjtcclxuICBuYXRpdmVTY3JvbGxiYXJTaXplOiBPYnNlcnZhYmxlPG51bWJlcj47XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQ6IGFueSxcclxuICAgICAgICAgICAgICBwcml2YXRlIG1hbmFnZXI6IFNjcm9sbGJhck1hbmFnZXIsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBwbGF0Zm9ybTogUGxhdGZvcm0pIHtcclxuICAgIGlmIChwbGF0Zm9ybS5pc0Jyb3dzZXIpIHtcclxuICAgICAgb2YobnVsbCkucGlwZShcclxuICAgICAgICB0YXAoKCkgPT4gdGhpcy5fbmF0aXZlU2Nyb2xsYmFyU2l6ZSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8bnVtYmVyPih0aGlzLmdldE5hdGl2ZVNjcm9sbGJhclNpemUoKSkpLFxyXG4gICAgICAgIHRhcCgoKSA9PiB0aGlzLm5hdGl2ZVNjcm9sbGJhclNpemUgPSB0aGlzLl9uYXRpdmVTY3JvbGxiYXJTaXplLmFzT2JzZXJ2YWJsZSgpKSxcclxuICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gZnJvbUV2ZW50KHRoaXMuZG9jdW1lbnQuZGVmYXVsdFZpZXcsICdyZXNpemUnLCB7IHBhc3NpdmU6IHRydWUgfSkpLFxyXG4gICAgICAgIGRlYm91bmNlVGltZSh0aGlzLm1hbmFnZXIuZ2xvYmFsT3B0aW9ucy53aW5kb3dSZXNpemVEZWJvdW5jZSksXHJcbiAgICAgICAgdGFwKCgpID0+IHRoaXMuX25hdGl2ZVNjcm9sbGJhclNpemUubmV4dCh0aGlzLmdldE5hdGl2ZVNjcm9sbGJhclNpemUoKSkpXHJcbiAgICAgICkuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgbmF0aXZlIHNjcm9sbGJhciBzaXplXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXROYXRpdmVTY3JvbGxiYXJTaXplKCk6IG51bWJlciB7XHJcbiAgICBpZiAodGhpcy5wbGF0Zm9ybS5BTkRST0lEIHx8IHRoaXMucGxhdGZvcm0uSU9TKSB7XHJcbiAgICAgIHJldHVybiA2O1xyXG4gICAgfVxyXG4gICAgY29uc3QgYm94ID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGJveC5jbGFzc05hbWUgPSAnbmctc2Nyb2xsYmFyLW1lYXN1cmUnO1xyXG4gICAgdGhpcy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGJveCk7XHJcbiAgICBjb25zdCBzaXplID0gYm94LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnJpZ2h0O1xyXG4gICAgdGhpcy5kb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGJveCk7XHJcbiAgICAvLyBpZiBzaXplIGlzIDAsIHJldHVybiAxNSAoZm9yIE1BQyBPUyBicm93c2VycylcclxuICAgIHJldHVybiBzaXplIHx8IDE1O1xyXG4gIH1cclxufVxyXG4iXX0=