/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { getRtlScrollAxisType } from '@angular/cdk/platform';
import { NG_SCROLLBAR_OPTIONS } from '../ng-scrollbar.model';
import * as i0 from "@angular/core";
import * as i1 from "../ng-scrollbar.model";
/** @type {?} */
var defaultOptions = {
    viewClass: '',
    trackClass: '',
    thumbClass: '',
    track: 'vertical',
    appearance: 'compact',
    visibility: 'native',
    position: 'native',
    thumbDragDisabled: false,
    trackClickDisabled: false,
    trackClickScrollDuration: 300,
    minThumbSize: 20,
    windowResizeDebounce: 0,
    sensorDebounce: 0,
    sensorDisabled: false
};
var ScrollbarManager = /** @class */ (function () {
    function ScrollbarManager(options) {
        this.globalOptions = options ? tslib_1.__assign({}, defaultOptions, options) : defaultOptions;
        this.rtlScrollAxisType = getRtlScrollAxisType();
    }
    ScrollbarManager.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    ScrollbarManager.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_SCROLLBAR_OPTIONS,] }] }
    ]; };
    /** @nocollapse */ ScrollbarManager.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ScrollbarManager_Factory() { return new ScrollbarManager(i0.ɵɵinject(i1.NG_SCROLLBAR_OPTIONS, 8)); }, token: ScrollbarManager, providedIn: "root" });
    return ScrollbarManager;
}());
export { ScrollbarManager };
if (false) {
    /** @type {?} */
    ScrollbarManager.prototype.globalOptions;
    /** @type {?} */
    ScrollbarManager.prototype.rtlScrollAxisType;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL3Njcm9sbGJhci1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxvQkFBb0IsRUFBcUIsTUFBTSx1QkFBdUIsQ0FBQztBQUNoRixPQUFPLEVBQUUsb0JBQW9CLEVBQXNCLE1BQU0sdUJBQXVCLENBQUM7Ozs7SUFFM0UsY0FBYyxHQUF1QjtJQUN6QyxTQUFTLEVBQUUsRUFBRTtJQUNiLFVBQVUsRUFBRSxFQUFFO0lBQ2QsVUFBVSxFQUFFLEVBQUU7SUFDZCxLQUFLLEVBQUUsVUFBVTtJQUNqQixVQUFVLEVBQUUsU0FBUztJQUNyQixVQUFVLEVBQUUsUUFBUTtJQUNwQixRQUFRLEVBQUUsUUFBUTtJQUNsQixpQkFBaUIsRUFBRSxLQUFLO0lBQ3hCLGtCQUFrQixFQUFFLEtBQUs7SUFDekIsd0JBQXdCLEVBQUUsR0FBRztJQUM3QixZQUFZLEVBQUUsRUFBRTtJQUNoQixvQkFBb0IsRUFBRSxDQUFDO0lBQ3ZCLGNBQWMsRUFBRSxDQUFDO0lBQ2pCLGNBQWMsRUFBRSxLQUFLO0NBQ3RCO0FBRUQ7SUFNRSwwQkFBc0QsT0FBMkI7UUFDL0UsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsQ0FBQyxzQkFBTSxjQUFjLEVBQUssT0FBTyxFQUFHLENBQUMsQ0FBQyxjQUFjLENBQUM7UUFFbEYsSUFBSSxDQUFDLGlCQUFpQixHQUFHLG9CQUFvQixFQUFFLENBQUM7SUFDbEQsQ0FBQzs7Z0JBVkYsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7OztnREFNbkIsUUFBUSxZQUFJLE1BQU0sU0FBQyxvQkFBb0I7OzsyQkEzQnREO0NBZ0NDLEFBWEQsSUFXQztTQVZZLGdCQUFnQjs7O0lBQzNCLHlDQUEyQzs7SUFFM0MsNkNBQThDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBnZXRSdGxTY3JvbGxBeGlzVHlwZSwgUnRsU2Nyb2xsQXhpc1R5cGUgfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xyXG5pbXBvcnQgeyBOR19TQ1JPTExCQVJfT1BUSU9OUywgTmdTY3JvbGxiYXJPcHRpb25zIH0gZnJvbSAnLi4vbmctc2Nyb2xsYmFyLm1vZGVsJztcclxuXHJcbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBOZ1Njcm9sbGJhck9wdGlvbnMgPSB7XHJcbiAgdmlld0NsYXNzOiAnJyxcclxuICB0cmFja0NsYXNzOiAnJyxcclxuICB0aHVtYkNsYXNzOiAnJyxcclxuICB0cmFjazogJ3ZlcnRpY2FsJyxcclxuICBhcHBlYXJhbmNlOiAnY29tcGFjdCcsXHJcbiAgdmlzaWJpbGl0eTogJ25hdGl2ZScsXHJcbiAgcG9zaXRpb246ICduYXRpdmUnLFxyXG4gIHRodW1iRHJhZ0Rpc2FibGVkOiBmYWxzZSxcclxuICB0cmFja0NsaWNrRGlzYWJsZWQ6IGZhbHNlLFxyXG4gIHRyYWNrQ2xpY2tTY3JvbGxEdXJhdGlvbjogMzAwLFxyXG4gIG1pblRodW1iU2l6ZTogMjAsXHJcbiAgd2luZG93UmVzaXplRGVib3VuY2U6IDAsXHJcbiAgc2Vuc29yRGVib3VuY2U6IDAsXHJcbiAgc2Vuc29yRGlzYWJsZWQ6IGZhbHNlXHJcbn07XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgU2Nyb2xsYmFyTWFuYWdlciB7XHJcbiAgcmVhZG9ubHkgZ2xvYmFsT3B0aW9uczogTmdTY3JvbGxiYXJPcHRpb25zO1xyXG5cclxuICByZWFkb25seSBydGxTY3JvbGxBeGlzVHlwZTogUnRsU2Nyb2xsQXhpc1R5cGU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoTkdfU0NST0xMQkFSX09QVElPTlMpIG9wdGlvbnM6IE5nU2Nyb2xsYmFyT3B0aW9ucykge1xyXG4gICAgdGhpcy5nbG9iYWxPcHRpb25zID0gb3B0aW9ucyA/IHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfSA6IGRlZmF1bHRPcHRpb25zO1xyXG5cclxuICAgIHRoaXMucnRsU2Nyb2xsQXhpc1R5cGUgPSBnZXRSdGxTY3JvbGxBeGlzVHlwZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=