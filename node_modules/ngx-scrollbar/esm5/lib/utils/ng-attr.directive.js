/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input } from '@angular/core';
var NgAttr = /** @class */ (function () {
    function NgAttr(el) {
        this.el = el;
    }
    Object.defineProperty(NgAttr.prototype, "ngAttr", {
        set: /**
         * @param {?} attrs
         * @return {?}
         */
        function (attrs) {
            var e_1, _a;
            try {
                for (var _b = tslib_1.__values(Object.entries(attrs)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = tslib_1.__read(_c.value, 2), key = _d[0], value = _d[1];
                    ((/** @type {?} */ (this.el.nativeElement))).setAttribute(key, value);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        },
        enumerable: true,
        configurable: true
    });
    NgAttr.decorators = [
        { type: Directive, args: [{ selector: '[ngAttr]' },] }
    ];
    /** @nocollapse */
    NgAttr.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    NgAttr.propDecorators = {
        ngAttr: [{ type: Input }]
    };
    return NgAttr;
}());
export { NgAttr };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgAttr.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctYXR0ci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL25nLWF0dHIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzdEO0lBR0UsZ0JBQW9CLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZO0lBQ2xDLENBQUM7SUFFRCxzQkFBYSwwQkFBTTs7Ozs7UUFBbkIsVUFBb0IsS0FBdUI7OztnQkFDekMsS0FBMkIsSUFBQSxLQUFBLGlCQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUEsZ0JBQUEsNEJBQUU7b0JBQXZDLElBQUEsZ0NBQVksRUFBWCxXQUFHLEVBQUUsYUFBSztvQkFDcEIsQ0FBQyxtQkFBQSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBZSxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDakU7Ozs7Ozs7OztRQUNILENBQUM7OztPQUFBOztnQkFWRixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFOzs7O2dCQUhmLFVBQVU7Ozt5QkFTM0IsS0FBSzs7SUFLUixhQUFDO0NBQUEsQUFYRCxJQVdDO1NBVlksTUFBTTs7Ozs7O0lBRUwsb0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ1Njcm9sbGJhclN0YXRlIH0gZnJvbSAnLi4vbmctc2Nyb2xsYmFyLm1vZGVsJztcclxuXHJcbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tuZ0F0dHJdJyB9KVxyXG5leHBvcnQgY2xhc3MgTmdBdHRyIHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikge1xyXG4gIH1cclxuXHJcbiAgQElucHV0KCkgc2V0IG5nQXR0cihhdHRyczogTmdTY3JvbGxiYXJTdGF0ZSkge1xyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoYXR0cnMpKSB7XHJcbiAgICAgICh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19