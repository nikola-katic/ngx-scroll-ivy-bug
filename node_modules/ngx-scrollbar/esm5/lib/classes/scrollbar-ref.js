/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { animationFrameScheduler, asyncScheduler, EMPTY, fromEvent, merge, of, Subject } from 'rxjs';
import { distinctUntilChanged, map, mergeMap, pluck, switchMap, takeUntil, tap } from 'rxjs/operators';
/**
 * @abstract
 */
var /**
 * @abstract
 */
ScrollbarRef = /** @class */ (function () {
    function ScrollbarRef(scrollbarRef, document, trackRef, thumbRef, platform, destroyed) {
        var _this = this;
        this.scrollbarRef = scrollbarRef;
        this.document = document;
        this.destroyed = destroyed;
        this.viewElement = scrollbarRef.viewport;
        this.trackElement = trackRef.nativeElement;
        this.thumbElement = thumbRef.nativeElement;
        if (!(platform.IOS || platform.ANDROID)) {
            this.pointerEvents = new Subject();
            this.hoveredState = new Subject();
            this.draggingState = new Subject();
            this.draggingState.pipe(distinctUntilChanged(), tap((/**
             * @param {?} state
             * @return {?}
             */
            function (state) { return _this.setDragging(state); })), takeUntil(this.destroyed)).subscribe();
            /** @type {?} */
            var scrollbarClicked_1 = fromEvent(this.viewElement, 'mousedown', { passive: true }).pipe(switchMap((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                _this.document.onselectstart = (/**
                 * @return {?}
                 */
                function () { return false; });
                /** @type {?} */
                var isThumbClick = isWithinBounds(e, _this.thumbElement.getBoundingClientRect());
                if (isThumbClick && !coerceBooleanProperty(_this.scrollbarRef.thumbDragDisabled)) {
                    return _this.dragged(e);
                }
                else {
                    /** @type {?} */
                    var isTrackClick = isWithinBounds(e, _this.trackElement.getBoundingClientRect());
                    if (isTrackClick && !coerceBooleanProperty(_this.scrollbarRef.trackClickDisabled)) {
                        return _this.trackClicked(e);
                    }
                }
                return EMPTY;
            })));
            // Activate/Deactivate scrollbar hover event
            /** @type {?} */
            var mouseLeave = fromEvent(this.viewElement, 'mouseleave').pipe(map((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                return false;
            })));
            merge(this.pointerEvents, mouseLeave).pipe(distinctUntilChanged()).pipe(tap((/**
             * @param {?} state
             * @return {?}
             */
            function (state) { return _this.setHovered(state); })), takeUntil(this.destroyed)).subscribe();
            // Activate/Deactivate scrollTo on scrollbar click event
            this.pointerEvents.pipe(distinctUntilChanged(), switchMap((/**
             * @param {?} state
             * @return {?}
             */
            function (state) { return state ? scrollbarClicked_1 : EMPTY; })), takeUntil(this.destroyed)).subscribe();
            this.hovered().pipe(tap((/**
             * @param {?} state
             * @return {?}
             */
            function (state) { return _this.pointerEvents.next(state); })), takeUntil(this.destroyed)).subscribe();
        }
        // Start updating thumb position when view scrolls
        this.scrolled().pipe(tap((/**
         * @return {?}
         */
        function () { return _this.updateThumb(); })), takeUntil(this.destroyed)).subscribe();
        // Update scrollbar when `NgScrollbar.update()` is called
        this.scrollbarRef.updated.pipe(tap((/**
         * @return {?}
         */
        function () { return _this.updateThumb(); })), takeUntil(this.destroyed)).subscribe();
        // Initialize scrollbar
        asyncScheduler.schedule((/**
         * @return {?}
         */
        function () { return _this.updateThumb(); }), 100);
    }
    Object.defineProperty(ScrollbarRef.prototype, "scrollMax", {
        // The available scrollable size
        get: 
        // The available scrollable size
        /**
         * @protected
         * @return {?}
         */
        function () {
            return this.scrollSize - this.viewportSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollbarRef.prototype, "trackMax", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.trackSize - this.thumbSize;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Updates scrollbar's thumb position and size
     */
    /**
     * Updates scrollbar's thumb position and size
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.updateThumb = /**
     * Updates scrollbar's thumb position and size
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var trackMax = this.trackMax;
        /** @type {?} */
        var size = calculateThumbSize(this.trackSize, this.scrollSize, this.scrollbarRef.minThumbSize);
        /** @type {?} */
        var position = calculateThumbPosition(this.scrollOffset, this.scrollMax, trackMax);
        animationFrameScheduler.schedule((/**
         * @return {?}
         */
        function () { return _this.applyThumbStyle(size, position, trackMax); }));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ScrollbarRef.prototype.dragged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var trackMax;
        /** @type {?} */
        var scrollMax;
        /** @type {?} */
        var dragStart = of(event).pipe(tap((/**
         * @return {?}
         */
        function () {
            // Capture scrollMax and trackMax once
            trackMax = _this.trackMax;
            scrollMax = _this.scrollMax;
            _this.draggingState.next(true);
        })));
        /** @type {?} */
        var dragging = fromEvent(this.document, 'mousemove', { capture: true, passive: true }).pipe(tap((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.stopPropagation(); })));
        /** @type {?} */
        var dragEnd = fromEvent(this.document, 'mouseup', { capture: true }).pipe(tap((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
            _this.document.onselectstart = null;
            _this.draggingState.next(false);
        })));
        return dragStart.pipe(pluck(this.pageProperty), map((/**
         * @param {?} pageOffset
         * @return {?}
         */
        function (pageOffset) { return pageOffset - _this.dragStartOffset; })), mergeMap((/**
         * @param {?} mouseDownOffset
         * @return {?}
         */
        function (mouseDownOffset) { return dragging.pipe(pluck(_this.clientProperty), 
        // Calculate how far the user's mouse is from the top/left of the scrollbar (minus the dragOffset).
        map((/**
         * @param {?} mouseOffset
         * @return {?}
         */
        function (mouseOffset) { return mouseOffset - _this.dragOffset; })), map((/**
         * @param {?} offset
         * @return {?}
         */
        function (offset) { return scrollMax * (offset - mouseDownOffset) / trackMax; })), map((/**
         * @param {?} position
         * @return {?}
         */
        function (position) { return _this.handleDragPosition(position, scrollMax); })), tap((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return _this.scrollTo(value); })), takeUntil(dragEnd)); })));
    };
    /**
     * Stream that emits when a scrollbar is hovered
     */
    /**
     * Stream that emits when a scrollbar is hovered
     * @private
     * @return {?}
     */
    ScrollbarRef.prototype.hovered = /**
     * Stream that emits when a scrollbar is hovered
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        return fromEvent(this.viewElement, 'mousemove', { passive: true }).pipe(map((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
            return isWithinBounds(e, _this.trackElement.getBoundingClientRect());
        })));
    };
    /**
     * Stream that emits when scrollbar track is clicked
     */
    /**
     * Stream that emits when scrollbar track is clicked
     * @protected
     * @param {?} e
     * @return {?}
     */
    ScrollbarRef.prototype.trackClicked = /**
     * Stream that emits when scrollbar track is clicked
     * @protected
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        return of(e).pipe(pluck(this.pageProperty), map((/**
         * @param {?} pageOffset
         * @return {?}
         */
        function (pageOffset) { return pageOffset - _this.dragOffset; })), map((/**
         * @param {?} clickOffset
         * @return {?}
         */
        function (clickOffset) {
            /** @type {?} */
            var offset = clickOffset - (_this.thumbSize / 2);
            /** @type {?} */
            var ratio = offset / _this.trackSize;
            return ratio * _this.scrollSize;
        })), tap((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return _this.scrollbarRef.scrollTo(tslib_1.__assign({}, _this.mapToScrollToOption(value), { duration: coerceNumberProperty(_this.scrollbarRef.trackClickScrollDuration) }));
        })), tap((/**
         * @return {?}
         */
        function () { return _this.document.onselectstart = null; })));
    };
    return ScrollbarRef;
}());
/**
 * @abstract
 */
export { ScrollbarRef };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.viewElement;
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.trackElement;
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.thumbElement;
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.hoveredState;
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.draggingState;
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.pointerEvents;
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.scrollbarRef;
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.document;
    /**
     * @type {?}
     * @protected
     */
    ScrollbarRef.prototype.destroyed;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.scrollSize = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.viewportSize = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.trackSize = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.thumbSize = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.scrollOffset = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.dragStartOffset = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.dragOffset = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.pageProperty = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.clientProperty = function () { };
    /**
     * Stream that emits when view is scrolled
     * @abstract
     * @protected
     * @return {?}
     */
    ScrollbarRef.prototype.scrolled = function () { };
    /**
     * Return a scrollTo option parameter
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    ScrollbarRef.prototype.mapToScrollToOption = function (value) { };
    /**
     * Updates scrollbar's thumb size and position
     * @abstract
     * @protected
     * @param {?} size
     * @param {?} position
     * @param {?=} trackMax
     * @return {?}
     */
    ScrollbarRef.prototype.applyThumbStyle = function (size, position, trackMax) { };
    /**
     * On drag function
     * @abstract
     * @protected
     * @param {?} position
     * @param {?} scrollMax
     * @return {?}
     */
    ScrollbarRef.prototype.handleDragPosition = function (position, scrollMax) { };
    /**
     * @abstract
     * @protected
     * @param {?} point
     * @return {?}
     */
    ScrollbarRef.prototype.scrollTo = function (point) { };
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    ScrollbarRef.prototype.setDragging = function (value) { };
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    ScrollbarRef.prototype.setHovered = function (value) { };
}
/**
 * Calculate Scrollbar thumb size
 * @param {?} trackSize Scrollbar track size
 * @param {?} contentSize Content size or Viewport scroll size
 * @param {?} minThumbSize Minimum scrollbar thumb size
 * @return {?}
 */
function calculateThumbSize(trackSize, contentSize, minThumbSize) {
    /** @type {?} */
    var scrollbarRatio = trackSize / contentSize;
    /** @type {?} */
    var thumbSize = scrollbarRatio * trackSize;
    return Math.max(~~thumbSize, minThumbSize);
}
/**
 * Calculate scrollbar thumb position
 * @param {?} scrollPosition The scroll position of the viewport
 * @param {?} scrollMax The max size available to scroll the viewport
 * @param {?} trackMax The max size available to move scrollbar thumb
 * @return {?}
 */
function calculateThumbPosition(scrollPosition, scrollMax, trackMax) {
    return scrollPosition * trackMax / scrollMax;
}
/**
 * Check if pointer is within scrollbar bounds
 * @param {?} e Pointer event
 * @param {?} rect Scrollbar Client Rect
 * @return {?}
 */
function isWithinBounds(e, rect) {
    return (e.clientX >= rect.left &&
        e.clientX <= rect.left + rect.width &&
        e.clientY >= rect.top &&
        e.clientY <= rect.top + rect.height);
}
//# sourceMappingURL=data:application/json;base64,