/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
/** @type {?} */
export var NG_SCROLLBAR_OPTIONS = new InjectionToken('NG_SCROLLBAR_OPTIONS');
/**
 * @record
 */
export function NgScrollbarOptions() { }
if (false) {
    /**
     * Sets the scroll axis of the viewport, there are 3 options:
     *
     * - `vertical` Use both vertical and horizontal scrollbar-control
     * - `horizontal` Use both vertical and horizontal scrollbar-control
     * - `all` Use both vertical and horizontal scrollbar-control
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.track;
    /**
     * When to show the scrollbar, and there are 3 options:
     *
     * - `native` (default) Scrollbar will be visible when viewport is scrollable like with native scrollbar-control
     * - `hover` Scrollbars are hidden by default, only visible on scrolling or hovering
     * - `always` Scrollbars are always shown even if the viewport is not scrollable
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.visibility;
    /**
     *  Sets the appearance of the scrollbar, there are 2 options:
     *
     * - `standard` (default) scrollbar space will be reserved just like with native scrollbar-control.
     * - `compact` scrollbar doesn't reserve any space, they are placed over the viewport.
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.appearance;
    /**
     * Sets the position of each scrollbar, there are 4 options:
     *
     * - `native` (Default) Use the default position like in native scrollbar-control.
     * - `invertY` Inverts vertical scrollbar position
     * - `invertX` Inverts Horizontal scrollbar position
     * - `invertAll` Inverts both scrollbar-control positions
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.position;
    /**
     * A class forwarded to scrollable viewport element
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.viewClass;
    /**
     * A class forwarded to the scrollbar track element
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.trackClass;
    /**
     * A class forwarded to the scrollbar thumb element
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.thumbClass;
    /**
     * The minimum scrollbar thumb size in px
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.minThumbSize;
    /**
     * The duration which the scrolling takes to reach its target when scrollbar rail is clicked
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.trackClickScrollDuration;
    /**
     * A flag used to enable/disable the scrollbar track clicked event
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.trackClickDisabled;
    /**
     * A flag used to enable/disable the scrollbar thumb dragged event
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.thumbDragDisabled;
    /**
     * Debounce interval for detecting changes via window.resize event
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.windowResizeDebounce;
    /**
     * Debounce interval for detecting changes via ResizeObserver
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.sensorDebounce;
    /**
     * Whether ResizeObserver is disabled
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.sensorDisabled;
}
/**
 * Set of attributes added on the scrollbar wrapper
 * @record
 */
export function NgScrollbarState() { }
if (false) {
    /** @type {?|undefined} */
    NgScrollbarState.prototype.position;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.track;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.appearance;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.visibility;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.disabled;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.dir;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.verticalUsed;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.horizontalUsed;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.isVerticallyScrollable;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.isHorizontallyScrollable;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.verticalHovered;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.horizontalHovered;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.verticalDragging;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.horizontalDragging;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2Nyb2xsYmFyLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNjcm9sbGJhci8iLCJzb3VyY2VzIjpbImxpYi9uZy1zY3JvbGxiYXIubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTy9DLE1BQU0sS0FBTyxvQkFBb0IsR0FBRyxJQUFJLGNBQWMsQ0FBcUIsc0JBQXNCLENBQUM7Ozs7QUFFbEcsd0NBcURDOzs7Ozs7Ozs7O0lBN0NDLG1DQUF1Qjs7Ozs7Ozs7O0lBUXZCLHdDQUFpQzs7Ozs7Ozs7SUFPakMsd0NBQWlDOzs7Ozs7Ozs7O0lBU2pDLHNDQUE2Qjs7Ozs7SUFFN0IsdUNBQW1COzs7OztJQUVuQix3Q0FBb0I7Ozs7O0lBRXBCLHdDQUFvQjs7Ozs7SUFFcEIsMENBQXNCOzs7OztJQUV0QixzREFBa0M7Ozs7O0lBRWxDLGdEQUE2Qjs7Ozs7SUFFN0IsK0NBQTRCOzs7OztJQUU1QixrREFBOEI7Ozs7O0lBRTlCLDRDQUF3Qjs7Ozs7SUFFeEIsNENBQXlCOzs7Ozs7QUFNM0Isc0NBZUM7OztJQWRDLG9DQUE2Qjs7SUFDN0IsaUNBQXVCOztJQUN2QixzQ0FBaUM7O0lBQ2pDLHNDQUFpQzs7SUFDakMsb0NBQW1COztJQUNuQiwrQkFBb0I7O0lBQ3BCLHdDQUF1Qjs7SUFDdkIsMENBQXlCOztJQUN6QixrREFBaUM7O0lBQ2pDLG9EQUFtQzs7SUFDbkMsMkNBQTBCOztJQUMxQiw2Q0FBNEI7O0lBQzVCLDRDQUEyQjs7SUFDM0IsOENBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmV4cG9ydCB0eXBlIFNjcm9sbGJhckFwcGVhcmFuY2UgPSAnc3RhbmRhcmQnIHwgJ2NvbXBhY3QnIHwgdW5kZWZpbmVkO1xyXG5leHBvcnQgdHlwZSBTY3JvbGxiYXJUcmFjayA9ICd2ZXJ0aWNhbCcgfCAnaG9yaXpvbnRhbCcgfCAnYWxsJyB8IHVuZGVmaW5lZDtcclxuZXhwb3J0IHR5cGUgU2Nyb2xsYmFyVmlzaWJpbGl0eSA9ICdob3ZlcicgfCAnYWx3YXlzJyB8ICduYXRpdmUnIHwgdW5kZWZpbmVkO1xyXG5leHBvcnQgdHlwZSBTY3JvbGxiYXJQb3NpdGlvbiA9ICduYXRpdmUnIHwgJ2ludmVydFknIHwgJ2ludmVydFgnIHwgJ2ludmVydEFsbCcgfCB1bmRlZmluZWQ7XHJcblxyXG5leHBvcnQgY29uc3QgTkdfU0NST0xMQkFSX09QVElPTlMgPSBuZXcgSW5qZWN0aW9uVG9rZW48TmdTY3JvbGxiYXJPcHRpb25zPignTkdfU0NST0xMQkFSX09QVElPTlMnKTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTmdTY3JvbGxiYXJPcHRpb25zIHtcclxuICAvKipcclxuICAgKiBTZXRzIHRoZSBzY3JvbGwgYXhpcyBvZiB0aGUgdmlld3BvcnQsIHRoZXJlIGFyZSAzIG9wdGlvbnM6XHJcbiAgICpcclxuICAgKiAtIGB2ZXJ0aWNhbGAgVXNlIGJvdGggdmVydGljYWwgYW5kIGhvcml6b250YWwgc2Nyb2xsYmFyLWNvbnRyb2xcclxuICAgKiAtIGBob3Jpem9udGFsYCBVc2UgYm90aCB2ZXJ0aWNhbCBhbmQgaG9yaXpvbnRhbCBzY3JvbGxiYXItY29udHJvbFxyXG4gICAqIC0gYGFsbGAgVXNlIGJvdGggdmVydGljYWwgYW5kIGhvcml6b250YWwgc2Nyb2xsYmFyLWNvbnRyb2xcclxuICAgKi9cclxuICB0cmFjaz86IFNjcm9sbGJhclRyYWNrO1xyXG4gIC8qKlxyXG4gICAqIFdoZW4gdG8gc2hvdyB0aGUgc2Nyb2xsYmFyLCBhbmQgdGhlcmUgYXJlIDMgb3B0aW9uczpcclxuICAgKlxyXG4gICAqIC0gYG5hdGl2ZWAgKGRlZmF1bHQpIFNjcm9sbGJhciB3aWxsIGJlIHZpc2libGUgd2hlbiB2aWV3cG9ydCBpcyBzY3JvbGxhYmxlIGxpa2Ugd2l0aCBuYXRpdmUgc2Nyb2xsYmFyLWNvbnRyb2xcclxuICAgKiAtIGBob3ZlcmAgU2Nyb2xsYmFycyBhcmUgaGlkZGVuIGJ5IGRlZmF1bHQsIG9ubHkgdmlzaWJsZSBvbiBzY3JvbGxpbmcgb3IgaG92ZXJpbmdcclxuICAgKiAtIGBhbHdheXNgIFNjcm9sbGJhcnMgYXJlIGFsd2F5cyBzaG93biBldmVuIGlmIHRoZSB2aWV3cG9ydCBpcyBub3Qgc2Nyb2xsYWJsZVxyXG4gICAqL1xyXG4gIHZpc2liaWxpdHk/OiBTY3JvbGxiYXJWaXNpYmlsaXR5O1xyXG4gIC8qKlxyXG4gICAqICBTZXRzIHRoZSBhcHBlYXJhbmNlIG9mIHRoZSBzY3JvbGxiYXIsIHRoZXJlIGFyZSAyIG9wdGlvbnM6XHJcbiAgICpcclxuICAgKiAtIGBzdGFuZGFyZGAgKGRlZmF1bHQpIHNjcm9sbGJhciBzcGFjZSB3aWxsIGJlIHJlc2VydmVkIGp1c3QgbGlrZSB3aXRoIG5hdGl2ZSBzY3JvbGxiYXItY29udHJvbC5cclxuICAgKiAtIGBjb21wYWN0YCBzY3JvbGxiYXIgZG9lc24ndCByZXNlcnZlIGFueSBzcGFjZSwgdGhleSBhcmUgcGxhY2VkIG92ZXIgdGhlIHZpZXdwb3J0LlxyXG4gICAqL1xyXG4gIGFwcGVhcmFuY2U/OiBTY3JvbGxiYXJBcHBlYXJhbmNlO1xyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIHBvc2l0aW9uIG9mIGVhY2ggc2Nyb2xsYmFyLCB0aGVyZSBhcmUgNCBvcHRpb25zOlxyXG4gICAqXHJcbiAgICogLSBgbmF0aXZlYCAoRGVmYXVsdCkgVXNlIHRoZSBkZWZhdWx0IHBvc2l0aW9uIGxpa2UgaW4gbmF0aXZlIHNjcm9sbGJhci1jb250cm9sLlxyXG4gICAqIC0gYGludmVydFlgIEludmVydHMgdmVydGljYWwgc2Nyb2xsYmFyIHBvc2l0aW9uXHJcbiAgICogLSBgaW52ZXJ0WGAgSW52ZXJ0cyBIb3Jpem9udGFsIHNjcm9sbGJhciBwb3NpdGlvblxyXG4gICAqIC0gYGludmVydEFsbGAgSW52ZXJ0cyBib3RoIHNjcm9sbGJhci1jb250cm9sIHBvc2l0aW9uc1xyXG4gICAqL1xyXG4gIHBvc2l0aW9uPzogU2Nyb2xsYmFyUG9zaXRpb247XHJcbiAgLyoqIEEgY2xhc3MgZm9yd2FyZGVkIHRvIHNjcm9sbGFibGUgdmlld3BvcnQgZWxlbWVudCAqL1xyXG4gIHZpZXdDbGFzcz86IHN0cmluZztcclxuICAvKiogQSBjbGFzcyBmb3J3YXJkZWQgdG8gdGhlIHNjcm9sbGJhciB0cmFjayBlbGVtZW50ICovXHJcbiAgdHJhY2tDbGFzcz86IHN0cmluZztcclxuICAvKiogQSBjbGFzcyBmb3J3YXJkZWQgdG8gdGhlIHNjcm9sbGJhciB0aHVtYiBlbGVtZW50ICovXHJcbiAgdGh1bWJDbGFzcz86IHN0cmluZztcclxuICAvKiogVGhlIG1pbmltdW0gc2Nyb2xsYmFyIHRodW1iIHNpemUgaW4gcHggKi9cclxuICBtaW5UaHVtYlNpemU/OiBudW1iZXI7XHJcbiAgLyoqIFRoZSBkdXJhdGlvbiB3aGljaCB0aGUgc2Nyb2xsaW5nIHRha2VzIHRvIHJlYWNoIGl0cyB0YXJnZXQgd2hlbiBzY3JvbGxiYXIgcmFpbCBpcyBjbGlja2VkICovXHJcbiAgdHJhY2tDbGlja1Njcm9sbER1cmF0aW9uPzogbnVtYmVyO1xyXG4gIC8qKiBBIGZsYWcgdXNlZCB0byBlbmFibGUvZGlzYWJsZSB0aGUgc2Nyb2xsYmFyIHRyYWNrIGNsaWNrZWQgZXZlbnQgKi9cclxuICB0cmFja0NsaWNrRGlzYWJsZWQ/OiBib29sZWFuO1xyXG4gIC8qKiBBIGZsYWcgdXNlZCB0byBlbmFibGUvZGlzYWJsZSB0aGUgc2Nyb2xsYmFyIHRodW1iIGRyYWdnZWQgZXZlbnQgKi9cclxuICB0aHVtYkRyYWdEaXNhYmxlZD86IGJvb2xlYW47XHJcbiAgLyoqIERlYm91bmNlIGludGVydmFsIGZvciBkZXRlY3RpbmcgY2hhbmdlcyB2aWEgd2luZG93LnJlc2l6ZSBldmVudCAqL1xyXG4gIHdpbmRvd1Jlc2l6ZURlYm91bmNlPzogbnVtYmVyO1xyXG4gIC8qKiBEZWJvdW5jZSBpbnRlcnZhbCBmb3IgZGV0ZWN0aW5nIGNoYW5nZXMgdmlhIFJlc2l6ZU9ic2VydmVyICovXHJcbiAgc2Vuc29yRGVib3VuY2U/OiBudW1iZXI7XHJcbiAgLyoqIFdoZXRoZXIgUmVzaXplT2JzZXJ2ZXIgaXMgZGlzYWJsZWQgKi9cclxuICBzZW5zb3JEaXNhYmxlZD86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgb2YgYXR0cmlidXRlcyBhZGRlZCBvbiB0aGUgc2Nyb2xsYmFyIHdyYXBwZXJcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTmdTY3JvbGxiYXJTdGF0ZSB7XHJcbiAgcG9zaXRpb24/OiBTY3JvbGxiYXJQb3NpdGlvbjtcclxuICB0cmFjaz86IFNjcm9sbGJhclRyYWNrO1xyXG4gIGFwcGVhcmFuY2U/OiBTY3JvbGxiYXJBcHBlYXJhbmNlO1xyXG4gIHZpc2liaWxpdHk/OiBTY3JvbGxiYXJWaXNpYmlsaXR5O1xyXG4gIGRpc2FibGVkPzogYm9vbGVhbjtcclxuICBkaXI/OiAncnRsJyB8ICdsdHInO1xyXG4gIHZlcnRpY2FsVXNlZD86IGJvb2xlYW47XHJcbiAgaG9yaXpvbnRhbFVzZWQ/OiBib29sZWFuO1xyXG4gIGlzVmVydGljYWxseVNjcm9sbGFibGU/OiBib29sZWFuO1xyXG4gIGlzSG9yaXpvbnRhbGx5U2Nyb2xsYWJsZT86IGJvb2xlYW47XHJcbiAgdmVydGljYWxIb3ZlcmVkPzogYm9vbGVhbjtcclxuICBob3Jpem9udGFsSG92ZXJlZD86IGJvb2xlYW47XHJcbiAgdmVydGljYWxEcmFnZ2luZz86IGJvb2xlYW47XHJcbiAgaG9yaXpvbnRhbERyYWdnaW5nPzogYm9vbGVhbjtcclxufVxyXG4iXX0=