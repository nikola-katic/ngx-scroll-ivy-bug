(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/cdk/coercion'), require('@angular/cdk/bidi'), require('@angular/cdk/platform'), require('rxjs'), require('rxjs/operators'), require('bezier-easing')) :
    typeof define === 'function' && define.amd ? define('ngx-scrollbar/smooth-scroll', ['exports', '@angular/core', '@angular/common', '@angular/cdk/coercion', '@angular/cdk/bidi', '@angular/cdk/platform', 'rxjs', 'rxjs/operators', 'bezier-easing'], factory) :
    (global = global || self, factory((global['ngx-scrollbar'] = global['ngx-scrollbar'] || {}, global['ngx-scrollbar']['smooth-scroll'] = {}), global.ng.core, global.ng.common, global.ng.cdk.coercion, global.ng.cdk.bidi, global.ng.cdk.platform, global.rxjs, global.rxjs.operators, global.BezierEasing));
}(this, function (exports, core, common, coercion, bidi, platform, rxjs, operators, BezierEasing) { 'use strict';

    BezierEasing = BezierEasing && BezierEasing.hasOwnProperty('default') ? BezierEasing['default'] : BezierEasing;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var SMOOTH_SCROLL_OPTIONS = new core.InjectionToken('SMOOTH_SCROLL_OPTIONS');
    /**
     * @record
     */
    function SmoothScrollOptions() { }
    if (false) {
        /** @type {?|undefined} */
        SmoothScrollOptions.prototype.duration;
        /** @type {?|undefined} */
        SmoothScrollOptions.prototype.easing;
    }
    /**
     * @record
     */
    function SmoothScrollStep() { }
    if (false) {
        /** @type {?} */
        SmoothScrollStep.prototype.scrollable;
        /** @type {?} */
        SmoothScrollStep.prototype.startTime;
        /** @type {?} */
        SmoothScrollStep.prototype.startX;
        /** @type {?} */
        SmoothScrollStep.prototype.startY;
        /** @type {?} */
        SmoothScrollStep.prototype.x;
        /** @type {?} */
        SmoothScrollStep.prototype.y;
        /** @type {?} */
        SmoothScrollStep.prototype.duration;
        /** @type {?} */
        SmoothScrollStep.prototype.easing;
        /** @type {?|undefined} */
        SmoothScrollStep.prototype.currentX;
        /** @type {?|undefined} */
        SmoothScrollStep.prototype.currentY;
    }
    /**
     * @record
     */
    function BezierEasingOptions() { }
    if (false) {
        /** @type {?} */
        BezierEasingOptions.prototype.x1;
        /** @type {?} */
        BezierEasingOptions.prototype.y1;
        /** @type {?} */
        BezierEasingOptions.prototype.x2;
        /** @type {?} */
        BezierEasingOptions.prototype.y2;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // @dynamic
    var SmoothScrollManager = /** @class */ (function () {
        function SmoothScrollManager(_zone, _dir, _document, _platform, customDefaultOptions) {
            this._zone = _zone;
            this._dir = _dir;
            this._document = _document;
            this._platform = _platform;
            // Keeps track of the ongoing SmoothScroll functions so they can be handled in case of duplication.
            // Each scrolled element gets a destroyer stream which gets deleted immediately after it completes.
            // Purpose: If user called a scroll function again on the same element before the scrolls completes,
            // it cancels the ongoing scroll and starts a new one
            this._onGoingScrolls = new Map();
            this._defaultOptions = __assign({ duration: 468, easing: {
                    x1: 0.42,
                    y1: 0,
                    x2: 0.58,
                    y2: 1
                } }, customDefaultOptions);
        }
        Object.defineProperty(SmoothScrollManager.prototype, "_w", {
            get: /**
             * @private
             * @return {?}
             */
            function () {
                return this._document.defaultView;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SmoothScrollManager.prototype, "_now", {
            /**
             * Timing method
             */
            get: /**
             * Timing method
             * @private
             * @return {?}
             */
            function () {
                return this._w.performance && this._w.performance.now
                    ? this._w.performance.now.bind(this._w.performance)
                    : Date.now;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * changes scroll position inside an element
         */
        /**
         * changes scroll position inside an element
         * @private
         * @param {?} el
         * @param {?} x
         * @param {?} y
         * @return {?}
         */
        SmoothScrollManager.prototype._scrollElement = /**
         * changes scroll position inside an element
         * @private
         * @param {?} el
         * @param {?} x
         * @param {?} y
         * @return {?}
         */
        function (el, x, y) {
            el.scrollLeft = x;
            el.scrollTop = y;
        };
        /**
         * Handles a given parameter of type HTMLElement, ElementRef or selector
         */
        /**
         * Handles a given parameter of type HTMLElement, ElementRef or selector
         * @private
         * @param {?} el
         * @param {?=} parent
         * @return {?}
         */
        SmoothScrollManager.prototype._getElement = /**
         * Handles a given parameter of type HTMLElement, ElementRef or selector
         * @private
         * @param {?} el
         * @param {?=} parent
         * @return {?}
         */
        function (el, parent) {
            if (typeof el === 'string') {
                return (parent || this._document).querySelector(el);
            }
            return coercion.coerceElement(el);
        };
        /**
         * Initializes a destroyer stream, re-initializes it if the element is already being scrolled
         */
        /**
         * Initializes a destroyer stream, re-initializes it if the element is already being scrolled
         * @private
         * @param {?} el
         * @return {?}
         */
        SmoothScrollManager.prototype._initSmoothScroll = /**
         * Initializes a destroyer stream, re-initializes it if the element is already being scrolled
         * @private
         * @param {?} el
         * @return {?}
         */
        function (el) {
            if (this._onGoingScrolls.has(el)) {
                this._onGoingScrolls.get(el).next();
            }
            return this._onGoingScrolls.set(el, new rxjs.Subject()).get(el);
        };
        /**
         * Checks if smooth scroll has reached, cleans up the smooth scroll stream and resolves its promise
         */
        /**
         * Checks if smooth scroll has reached, cleans up the smooth scroll stream and resolves its promise
         * @private
         * @param {?} context
         * @param {?} destroyed
         * @param {?} resolve
         * @return {?}
         */
        SmoothScrollManager.prototype._isFinished = /**
         * Checks if smooth scroll has reached, cleans up the smooth scroll stream and resolves its promise
         * @private
         * @param {?} context
         * @param {?} destroyed
         * @param {?} resolve
         * @return {?}
         */
        function (context, destroyed, resolve) {
            if (context.currentX !== context.x || context.currentY !== context.y) {
                return true;
            }
            destroyed.next();
            resolve();
            return false;
        };
        /**
         * Terminates an ongoing smooth scroll
         */
        /**
         * Terminates an ongoing smooth scroll
         * @private
         * @param {?} el
         * @param {?} destroyed
         * @return {?}
         */
        SmoothScrollManager.prototype._interrupted = /**
         * Terminates an ongoing smooth scroll
         * @private
         * @param {?} el
         * @param {?} destroyed
         * @return {?}
         */
        function (el, destroyed) {
            return rxjs.merge(rxjs.fromEvent(el, 'wheel', { passive: true, capture: true }), rxjs.fromEvent(el, 'touchmove', { passive: true, capture: true }), destroyed).pipe(operators.take(1));
        };
        /**
         * Deletes the destroyer function, runs if the smooth scroll has finished or interrupted
         */
        /**
         * Deletes the destroyer function, runs if the smooth scroll has finished or interrupted
         * @private
         * @param {?} el
         * @param {?} destroyed
         * @return {?}
         */
        SmoothScrollManager.prototype._destroy = /**
         * Deletes the destroyer function, runs if the smooth scroll has finished or interrupted
         * @private
         * @param {?} el
         * @param {?} destroyed
         * @return {?}
         */
        function (el, destroyed) {
            destroyed.complete();
            this._onGoingScrolls.delete(el);
        };
        /**
         * A function called recursively that, given a context, steps through scrolling
         */
        /**
         * A function called recursively that, given a context, steps through scrolling
         * @private
         * @param {?} context
         * @return {?}
         */
        SmoothScrollManager.prototype._step = /**
         * A function called recursively that, given a context, steps through scrolling
         * @private
         * @param {?} context
         * @return {?}
         */
        function (context) {
            var _this = this;
            return new rxjs.Observable((/**
             * @param {?} observer
             * @return {?}
             */
            function (observer) {
                /** @type {?} */
                var elapsed = (_this._now() - context.startTime) / context.duration;
                // avoid elapsed times higher than one
                elapsed = elapsed > 1 ? 1 : elapsed;
                // apply easing to elapsed time
                /** @type {?} */
                var value = context.easing(elapsed);
                context.currentX = context.startX + (context.x - context.startX) * value;
                context.currentY = context.startY + (context.y - context.startY) * value;
                _this._scrollElement(context.scrollable, context.currentX, context.currentY);
                // Proceed to the step
                rxjs.animationFrameScheduler.schedule((/**
                 * @return {?}
                 */
                function () { return observer.next(context); }));
            }));
        };
        /**
         * @private
         * @param {?} el
         * @param {?} options
         * @return {?}
         */
        SmoothScrollManager.prototype._applyScrollToOptions = /**
         * @private
         * @param {?} el
         * @param {?} options
         * @return {?}
         */
        function (el, options) {
            var _this = this;
            if (!options.duration) {
                this._scrollElement(el, options.left, options.top);
                return Promise.resolve();
            }
            // Initialize a destroyer stream, reinitialize it if the element is already being scrolled
            /** @type {?} */
            var destroyed = this._initSmoothScroll(el);
            /** @type {?} */
            var easingOptions = options.easing || this._defaultOptions.easing;
            /** @type {?} */
            var context = {
                scrollable: el,
                startTime: this._now(),
                startX: el.scrollLeft,
                startY: el.scrollTop,
                x: options.left == null ? el.scrollLeft : ~~options.left,
                y: options.top == null ? el.scrollTop : ~~options.top,
                duration: options.duration || this._defaultOptions.duration,
                easing: BezierEasing(easingOptions.x1, easingOptions.y1, easingOptions.x2, easingOptions.y2)
            };
            return new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            function (resolve) {
                // Scroll each step recursively
                rxjs.of(null).pipe(operators.expand((/**
                 * @return {?}
                 */
                function () { return _this._step(context).pipe(operators.takeWhile((/**
                 * @param {?} currContext
                 * @return {?}
                 */
                function (currContext) { return _this._isFinished(currContext, destroyed, resolve); }))); })), operators.takeUntil(_this._interrupted(el, destroyed)), operators.finalize((/**
                 * @return {?}
                 */
                function () { return _this._destroy(el, destroyed); }))).subscribe();
            }));
        };
        /**
         * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo
         * method, since browsers are not consistent about what scrollLeft means in RTL. For this method
         * left and right always refer to the left and right side of the scrolling container irrespective
         * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
         * in an RTL context.
         * @param scrollable element
         * @param options specified the offsets to scroll to.
         */
        /**
         * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo
         * method, since browsers are not consistent about what scrollLeft means in RTL. For this method
         * left and right always refer to the left and right side of the scrolling container irrespective
         * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
         * in an RTL context.
         * @param {?} scrollable element
         * @param {?} options specified the offsets to scroll to.
         * @return {?}
         */
        SmoothScrollManager.prototype.scrollTo = /**
         * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo
         * method, since browsers are not consistent about what scrollLeft means in RTL. For this method
         * left and right always refer to the left and right side of the scrolling container irrespective
         * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
         * in an RTL context.
         * @param {?} scrollable element
         * @param {?} options specified the offsets to scroll to.
         * @return {?}
         */
        function (scrollable, options) {
            if (common.isPlatformBrowser(this._platform)) {
                /** @type {?} */
                var el = this._getElement(scrollable);
                /** @type {?} */
                var isRtl = getComputedStyle(el).direction === 'rtl';
                /** @type {?} */
                var rtlScrollAxisType = platform.getRtlScrollAxisType();
                // Rewrite start & end offsets as right or left offsets.
                options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;
                options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;
                // Rewrite the bottom offset as a top offset.
                if (options.bottom != null) {
                    ((/** @type {?} */ (options))).top = el.scrollHeight - el.clientHeight - options.bottom;
                }
                // Rewrite the right offset as a left offset.
                if (isRtl && rtlScrollAxisType !== platform.RtlScrollAxisType.NORMAL) {
                    if (options.left != null) {
                        ((/** @type {?} */ (options))).right = el.scrollWidth - el.clientWidth - options.left;
                    }
                    if (rtlScrollAxisType === platform.RtlScrollAxisType.INVERTED) {
                        options.left = options.right;
                    }
                    else if (rtlScrollAxisType === platform.RtlScrollAxisType.NEGATED) {
                        options.left = options.right ? -options.right : options.right;
                    }
                }
                else {
                    if (options.right != null) {
                        ((/** @type {?} */ (options))).left = el.scrollWidth - el.clientWidth - options.right;
                    }
                }
                return this._applyScrollToOptions(el, options);
            }
        };
        /**
         * Scroll to element by reference or selector
         */
        /**
         * Scroll to element by reference or selector
         * @param {?} scrollable
         * @param {?} target
         * @param {?} options
         * @return {?}
         */
        SmoothScrollManager.prototype.scrollToElement = /**
         * Scroll to element by reference or selector
         * @param {?} scrollable
         * @param {?} target
         * @param {?} options
         * @return {?}
         */
        function (scrollable, target, options) {
            /** @type {?} */
            var scrollableEl = this._getElement(scrollable);
            /** @type {?} */
            var targetEl = this._getElement(target, scrollableEl);
            /** @type {?} */
            var duration = options.duration;
            /** @type {?} */
            var easing = options.easing;
            return targetEl ? this.scrollTo(scrollableEl, {
                left: targetEl.offsetLeft + (options.left || 0),
                top: targetEl.offsetTop + (options.top || 0),
                duration: duration,
                easing: easing
            }) : new Promise(null);
        };
        SmoothScrollManager.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        SmoothScrollManager.ctorParameters = function () { return [
            { type: core.NgZone },
            { type: bidi.Directionality },
            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
            { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [SMOOTH_SCROLL_OPTIONS,] }] }
        ]; };
        /** @nocollapse */ SmoothScrollManager.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function SmoothScrollManager_Factory() { return new SmoothScrollManager(core.ɵɵinject(core.NgZone), core.ɵɵinject(bidi.Directionality), core.ɵɵinject(common.DOCUMENT), core.ɵɵinject(core.PLATFORM_ID), core.ɵɵinject(SMOOTH_SCROLL_OPTIONS, 8)); }, token: SmoothScrollManager, providedIn: "root" });
        return SmoothScrollManager;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        SmoothScrollManager.prototype._defaultOptions;
        /**
         * @type {?}
         * @private
         */
        SmoothScrollManager.prototype._onGoingScrolls;
        /**
         * @type {?}
         * @private
         */
        SmoothScrollManager.prototype._zone;
        /**
         * @type {?}
         * @private
         */
        SmoothScrollManager.prototype._dir;
        /**
         * @type {?}
         * @private
         */
        SmoothScrollManager.prototype._document;
        /**
         * @type {?}
         * @private
         */
        SmoothScrollManager.prototype._platform;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SmoothScroll = /** @class */ (function () {
        function SmoothScroll(element, smoothScroll) {
            this.element = element;
            this.smoothScroll = smoothScroll;
        }
        /**
         * @param {?} options
         * @return {?}
         */
        SmoothScroll.prototype.scrollTo = /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            return this.smoothScroll.scrollTo(this.element, options);
        };
        /**
         * @param {?} target
         * @param {?} options
         * @return {?}
         */
        SmoothScroll.prototype.scrollToElement = /**
         * @param {?} target
         * @param {?} options
         * @return {?}
         */
        function (target, options) {
            return this.smoothScroll.scrollToElement(this.element, target, options);
        };
        SmoothScroll.decorators = [
            { type: core.Directive, args: [{
                        selector: '[smoothScroll], [smooth-scroll]',
                        exportAs: 'smoothScroll'
                    },] }
        ];
        /** @nocollapse */
        SmoothScroll.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: SmoothScrollManager }
        ]; };
        return SmoothScroll;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        SmoothScroll.prototype.element;
        /**
         * @type {?}
         * @private
         */
        SmoothScroll.prototype.smoothScroll;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SmoothScrollModule = /** @class */ (function () {
        function SmoothScrollModule() {
        }
        SmoothScrollModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [SmoothScroll],
                        exports: [SmoothScroll]
                    },] }
        ];
        return SmoothScrollModule;
    }());

    exports.SMOOTH_SCROLL_OPTIONS = SMOOTH_SCROLL_OPTIONS;
    exports.SmoothScroll = SmoothScroll;
    exports.SmoothScrollManager = SmoothScrollManager;
    exports.SmoothScrollModule = SmoothScrollModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-scrollbar-smooth-scroll.umd.js.map
