(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/bidi'), require('ngx-scrollbar'), require('@angular/cdk/platform'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-scrollbar/reached-event', ['exports', '@angular/core', '@angular/cdk/bidi', 'ngx-scrollbar', '@angular/cdk/platform', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory((global['ngx-scrollbar'] = global['ngx-scrollbar'] || {}, global['ngx-scrollbar']['reached-event'] = {}), global.ng.core, global.ng.cdk.bidi, global['ngx-scrollbar'], global.ng.cdk.platform, global.rxjs, global.rxjs.operators));
}(this, function (exports, core, bidi, ngxScrollbar, platform, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // Uncomment the following line in development mode
    // import { NgScrollbar } from '../../src/public-api';
    var 
    // Uncomment the following line in development mode
    // import { NgScrollbar } from '../../src/public-api';
    ReachedFunctions = /** @class */ (function () {
        function ReachedFunctions() {
        }
        /**
         * @param {?} offset
         * @param {?} e
         * @return {?}
         */
        ReachedFunctions.reachedTop = /**
         * @param {?} offset
         * @param {?} e
         * @return {?}
         */
        function (offset, e) {
            return ReachedFunctions.reached(-e.target.scrollTop, 0, offset);
        };
        /**
         * @param {?} offset
         * @param {?} e
         * @return {?}
         */
        ReachedFunctions.reachedBottom = /**
         * @param {?} offset
         * @param {?} e
         * @return {?}
         */
        function (offset, e) {
            return ReachedFunctions.reached(e.target.scrollTop + e.target.clientHeight, e.target.scrollHeight, offset);
        };
        /**
         * @param {?} offset
         * @param {?} e
         * @param {?} direction
         * @param {?} rtlScrollAxisType
         * @return {?}
         */
        ReachedFunctions.reachedStart = /**
         * @param {?} offset
         * @param {?} e
         * @param {?} direction
         * @param {?} rtlScrollAxisType
         * @return {?}
         */
        function (offset, e, direction, rtlScrollAxisType) {
            if (direction === 'rtl') {
                if (rtlScrollAxisType === platform.RtlScrollAxisType.NEGATED) {
                    return ReachedFunctions.reached(e.target.scrollLeft, 0, offset);
                }
                if (rtlScrollAxisType === platform.RtlScrollAxisType.INVERTED) {
                    return ReachedFunctions.reached(-e.target.scrollLeft, 0, offset);
                }
                return ReachedFunctions.reached(e.target.scrollLeft + e.target.clientWidth, e.target.scrollWidth, offset);
            }
            return ReachedFunctions.reached(-e.target.scrollLeft, 0, offset);
        };
        /**
         * @param {?} offset
         * @param {?} e
         * @param {?} direction
         * @param {?} rtlScrollAxisType
         * @return {?}
         */
        ReachedFunctions.reachedEnd = /**
         * @param {?} offset
         * @param {?} e
         * @param {?} direction
         * @param {?} rtlScrollAxisType
         * @return {?}
         */
        function (offset, e, direction, rtlScrollAxisType) {
            if (direction === 'rtl') {
                if (rtlScrollAxisType === platform.RtlScrollAxisType.NEGATED) {
                    return ReachedFunctions.reached(-(e.target.scrollLeft - e.target.clientWidth), e.target.scrollWidth, offset);
                }
                if (rtlScrollAxisType === platform.RtlScrollAxisType.INVERTED) {
                    return ReachedFunctions.reached(-(e.target.scrollLeft + e.target.clientWidth), e.target.scrollWidth, offset);
                }
                return ReachedFunctions.reached(-e.target.scrollLeft, 0, offset);
            }
            return ReachedFunctions.reached(e.target.scrollLeft + e.target.clientWidth, e.target.scrollWidth, offset);
        };
        /**
         * @param {?} currPosition
         * @param {?} targetPosition
         * @param {?} offset
         * @return {?}
         */
        ReachedFunctions.reached = /**
         * @param {?} currPosition
         * @param {?} targetPosition
         * @param {?} offset
         * @return {?}
         */
        function (currPosition, targetPosition, offset) {
            return currPosition >= targetPosition - offset;
        };
        return ReachedFunctions;
    }());
    /**
     * @abstract
     */
    var ScrollReached = /** @class */ (function () {
        function ScrollReached(scrollbar, zone) {
            var _this = this;
            this.scrollbar = scrollbar;
            this.zone = zone;
            /**
             * offset: Reached offset value in px
             */
            this.offset = 0;
            /**
             * Stream that emits scroll event when `NgScrollbar.scrolled` is initialized.
             *
             * **NOTE:** This subject is used to hold the place of `NgScrollbar.scrolled` when it's not initialized yet
             */
            this.scrollEvent = new rxjs.Subject();
            /**
             * subscription: Scrolled event subscription, used to unsubscribe from the event on destroy
             */
            this.subscription = rxjs.Subscription.EMPTY;
            /**
             * A stream used to assign the reached output
             */
            this.reachedEvent = new rxjs.Observable((/**
             * @param {?} observer
             * @return {?}
             */
            function (observer) {
                return _this.scrollReached().subscribe((/**
                 * @param {?} _
                 * @return {?}
                 */
                function (_) {
                    return Promise.resolve().then((/**
                     * @return {?}
                     */
                    function () { return _this.zone.run((/**
                     * @return {?}
                     */
                    function () { return observer.next(_); })); }));
                }));
            }));
            if (!scrollbar) {
                throw new Error('[NgScrollbarReached Directive]: Host element must be an NgScrollbar component.');
            }
        }
        /**
         * @return {?}
         */
        ScrollReached.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.subscription.unsubscribe();
        };
        /**
         * @protected
         * @return {?}
         */
        ScrollReached.prototype.scrollReached = /**
         * @protected
         * @return {?}
         */
        function () {
            var _this = this;
            // current event
            /** @type {?} */
            var currEvent;
            return this.scrollEvent.pipe(operators.tap((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return currEvent = e; })), 
            // Check if it scroll has reached
            operators.map((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return _this.reached(_this.offset, e); })), 
            // Distinct until reached value has changed
            operators.distinctUntilChanged(), 
            // Emit only if reached is true
            operators.filter((/**
             * @param {?} reached
             * @return {?}
             */
            function (reached) { return reached; })), 
            // Return scroll event
            operators.map((/**
             * @return {?}
             */
            function () { return currEvent; })));
        };
        ScrollReached.propDecorators = {
            offset: [{ type: core.Input, args: ['reachedOffset',] }]
        };
        return ScrollReached;
    }());
    if (false) {
        /**
         * offset: Reached offset value in px
         * @type {?}
         */
        ScrollReached.prototype.offset;
        /**
         * Stream that emits scroll event when `NgScrollbar.scrolled` is initialized.
         *
         * **NOTE:** This subject is used to hold the place of `NgScrollbar.scrolled` when it's not initialized yet
         * @type {?}
         * @protected
         */
        ScrollReached.prototype.scrollEvent;
        /**
         * subscription: Scrolled event subscription, used to unsubscribe from the event on destroy
         * @type {?}
         * @protected
         */
        ScrollReached.prototype.subscription;
        /**
         * A stream used to assign the reached output
         * @type {?}
         * @protected
         */
        ScrollReached.prototype.reachedEvent;
        /**
         * @type {?}
         * @protected
         */
        ScrollReached.prototype.scrollbar;
        /**
         * @type {?}
         * @protected
         */
        ScrollReached.prototype.zone;
        /**
         * @abstract
         * @protected
         * @param {?} offset
         * @param {?=} e
         * @return {?}
         */
        ScrollReached.prototype.reached = function (offset, e) { };
    }
    /**
     * @abstract
     */
    var VerticalScrollReached = /** @class */ (function (_super) {
        __extends(VerticalScrollReached, _super);
        function VerticalScrollReached(scrollbar, zone) {
            var _this = _super.call(this, scrollbar, zone) || this;
            _this.scrollbar = scrollbar;
            _this.zone = zone;
            return _this;
        }
        /**
         * @return {?}
         */
        VerticalScrollReached.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.subscription = this.scrollbar.verticalScrolled.subscribe(this.scrollEvent);
        };
        /** @nocollapse */
        VerticalScrollReached.ctorParameters = function () { return [
            { type: ngxScrollbar.NgScrollbar, decorators: [{ type: core.Optional }] },
            { type: core.NgZone }
        ]; };
        return VerticalScrollReached;
    }(ScrollReached));
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        VerticalScrollReached.prototype.scrollbar;
        /**
         * @type {?}
         * @protected
         */
        VerticalScrollReached.prototype.zone;
    }
    /**
     * @abstract
     */
    var HorizontalScrollReached = /** @class */ (function (_super) {
        __extends(HorizontalScrollReached, _super);
        function HorizontalScrollReached(scrollbar, zone) {
            var _this = _super.call(this, scrollbar, zone) || this;
            _this.scrollbar = scrollbar;
            _this.zone = zone;
            return _this;
        }
        /**
         * @return {?}
         */
        HorizontalScrollReached.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.subscription = this.scrollbar.horizontalScrolled.subscribe(this.scrollEvent);
        };
        /** @nocollapse */
        HorizontalScrollReached.ctorParameters = function () { return [
            { type: ngxScrollbar.NgScrollbar, decorators: [{ type: core.Optional }] },
            { type: core.NgZone }
        ]; };
        return HorizontalScrollReached;
    }(ScrollReached));
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        HorizontalScrollReached.prototype.scrollbar;
        /**
         * @type {?}
         * @protected
         */
        HorizontalScrollReached.prototype.zone;
    }
    var NgScrollbarReachedTop = /** @class */ (function (_super) {
        __extends(NgScrollbarReachedTop, _super);
        function NgScrollbarReachedTop(scrollbar, zone) {
            var _this = _super.call(this, scrollbar, zone) || this;
            _this.scrollbar = scrollbar;
            _this.zone = zone;
            /**
             * Stream that emits when scroll has reached the top
             */
            _this.reachedTop = _this.reachedEvent;
            return _this;
        }
        /**
         * @return {?}
         */
        NgScrollbarReachedTop.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Check if scroll has reached the top (vertically)
         * @param offset Scroll offset
         * @param e Scroll event
         */
        /**
         * Check if scroll has reached the top (vertically)
         * @protected
         * @param {?} offset Scroll offset
         * @param {?} e Scroll event
         * @return {?}
         */
        NgScrollbarReachedTop.prototype.reached = /**
         * Check if scroll has reached the top (vertically)
         * @protected
         * @param {?} offset Scroll offset
         * @param {?} e Scroll event
         * @return {?}
         */
        function (offset, e) {
            return ReachedFunctions.reachedTop(offset, e);
        };
        NgScrollbarReachedTop.decorators = [
            { type: core.Directive, args: [{
                        selector: '[reachedTop], [reached-top]',
                    },] }
        ];
        /** @nocollapse */
        NgScrollbarReachedTop.ctorParameters = function () { return [
            { type: ngxScrollbar.NgScrollbar, decorators: [{ type: core.Optional }] },
            { type: core.NgZone }
        ]; };
        NgScrollbarReachedTop.propDecorators = {
            reachedTop: [{ type: core.Output }]
        };
        return NgScrollbarReachedTop;
    }(VerticalScrollReached));
    if (false) {
        /**
         * Stream that emits when scroll has reached the top
         * @type {?}
         */
        NgScrollbarReachedTop.prototype.reachedTop;
        /**
         * @type {?}
         * @protected
         */
        NgScrollbarReachedTop.prototype.scrollbar;
        /**
         * @type {?}
         * @protected
         */
        NgScrollbarReachedTop.prototype.zone;
    }
    var NgScrollbarReachedBottom = /** @class */ (function (_super) {
        __extends(NgScrollbarReachedBottom, _super);
        function NgScrollbarReachedBottom(scrollbar, zone) {
            var _this = _super.call(this, scrollbar, zone) || this;
            _this.scrollbar = scrollbar;
            _this.zone = zone;
            /**
             * Stream that emits when scroll has reached the bottom
             */
            _this.reachedBottom = _this.reachedEvent;
            return _this;
        }
        /**
         * @return {?}
         */
        NgScrollbarReachedBottom.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Check if scroll has reached the bottom (vertically)
         * @param offset Scroll offset
         * @param e Scroll event
         */
        /**
         * Check if scroll has reached the bottom (vertically)
         * @protected
         * @param {?} offset Scroll offset
         * @param {?} e Scroll event
         * @return {?}
         */
        NgScrollbarReachedBottom.prototype.reached = /**
         * Check if scroll has reached the bottom (vertically)
         * @protected
         * @param {?} offset Scroll offset
         * @param {?} e Scroll event
         * @return {?}
         */
        function (offset, e) {
            return ReachedFunctions.reachedBottom(offset, e);
        };
        NgScrollbarReachedBottom.decorators = [
            { type: core.Directive, args: [{
                        selector: '[reachedBottom], [reached-bottom]',
                    },] }
        ];
        /** @nocollapse */
        NgScrollbarReachedBottom.ctorParameters = function () { return [
            { type: ngxScrollbar.NgScrollbar, decorators: [{ type: core.Optional }] },
            { type: core.NgZone }
        ]; };
        NgScrollbarReachedBottom.propDecorators = {
            reachedBottom: [{ type: core.Output }]
        };
        return NgScrollbarReachedBottom;
    }(VerticalScrollReached));
    if (false) {
        /**
         * Stream that emits when scroll has reached the bottom
         * @type {?}
         */
        NgScrollbarReachedBottom.prototype.reachedBottom;
        /**
         * @type {?}
         * @protected
         */
        NgScrollbarReachedBottom.prototype.scrollbar;
        /**
         * @type {?}
         * @protected
         */
        NgScrollbarReachedBottom.prototype.zone;
    }
    var NgScrollbarReachedStart = /** @class */ (function (_super) {
        __extends(NgScrollbarReachedStart, _super);
        function NgScrollbarReachedStart(scrollbar, zone, dir) {
            var _this = _super.call(this, scrollbar, zone) || this;
            _this.scrollbar = scrollbar;
            _this.zone = zone;
            _this.dir = dir;
            /**
             * Stream that emits when scroll has reached the start
             */
            _this.reachedStart = _this.reachedEvent;
            return _this;
        }
        /**
         * @return {?}
         */
        NgScrollbarReachedStart.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Check if scroll has reached the start (horizontally)
         * @param offset Scroll offset
         * @param e Scroll event
         */
        /**
         * Check if scroll has reached the start (horizontally)
         * @protected
         * @param {?} offset Scroll offset
         * @param {?} e Scroll event
         * @return {?}
         */
        NgScrollbarReachedStart.prototype.reached = /**
         * Check if scroll has reached the start (horizontally)
         * @protected
         * @param {?} offset Scroll offset
         * @param {?} e Scroll event
         * @return {?}
         */
        function (offset, e) {
            return ReachedFunctions.reachedStart(offset, e, this.dir.value, this.scrollbar.manager.rtlScrollAxisType);
        };
        NgScrollbarReachedStart.decorators = [
            { type: core.Directive, args: [{
                        selector: '[reachedStart], [reached-start]',
                    },] }
        ];
        /** @nocollapse */
        NgScrollbarReachedStart.ctorParameters = function () { return [
            { type: ngxScrollbar.NgScrollbar, decorators: [{ type: core.Optional }] },
            { type: core.NgZone },
            { type: bidi.Directionality }
        ]; };
        NgScrollbarReachedStart.propDecorators = {
            reachedStart: [{ type: core.Output }]
        };
        return NgScrollbarReachedStart;
    }(HorizontalScrollReached));
    if (false) {
        /**
         * Stream that emits when scroll has reached the start
         * @type {?}
         */
        NgScrollbarReachedStart.prototype.reachedStart;
        /**
         * @type {?}
         * @protected
         */
        NgScrollbarReachedStart.prototype.scrollbar;
        /**
         * @type {?}
         * @protected
         */
        NgScrollbarReachedStart.prototype.zone;
        /**
         * @type {?}
         * @private
         */
        NgScrollbarReachedStart.prototype.dir;
    }
    var NgScrollbarReachedEnd = /** @class */ (function (_super) {
        __extends(NgScrollbarReachedEnd, _super);
        function NgScrollbarReachedEnd(scrollbar, zone, dir) {
            var _this = _super.call(this, scrollbar, zone) || this;
            _this.scrollbar = scrollbar;
            _this.zone = zone;
            _this.dir = dir;
            /**
             * Stream that emits when scroll has reached the end
             */
            _this.reachedEnd = _this.reachedEvent;
            return _this;
        }
        /**
         * @return {?}
         */
        NgScrollbarReachedEnd.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Check if scroll has reached the end (horizontally)
         * @param offset Scroll offset
         * @param e Scroll event
         */
        /**
         * Check if scroll has reached the end (horizontally)
         * @protected
         * @param {?} offset Scroll offset
         * @param {?} e Scroll event
         * @return {?}
         */
        NgScrollbarReachedEnd.prototype.reached = /**
         * Check if scroll has reached the end (horizontally)
         * @protected
         * @param {?} offset Scroll offset
         * @param {?} e Scroll event
         * @return {?}
         */
        function (offset, e) {
            return ReachedFunctions.reachedEnd(offset, e, this.dir.value, this.scrollbar.manager.rtlScrollAxisType);
        };
        NgScrollbarReachedEnd.decorators = [
            { type: core.Directive, args: [{
                        selector: '[reachedEnd], [reached-end]',
                    },] }
        ];
        /** @nocollapse */
        NgScrollbarReachedEnd.ctorParameters = function () { return [
            { type: ngxScrollbar.NgScrollbar, decorators: [{ type: core.Optional }] },
            { type: core.NgZone },
            { type: bidi.Directionality }
        ]; };
        NgScrollbarReachedEnd.propDecorators = {
            reachedEnd: [{ type: core.Output }]
        };
        return NgScrollbarReachedEnd;
    }(HorizontalScrollReached));
    if (false) {
        /**
         * Stream that emits when scroll has reached the end
         * @type {?}
         */
        NgScrollbarReachedEnd.prototype.reachedEnd;
        /**
         * @type {?}
         * @protected
         */
        NgScrollbarReachedEnd.prototype.scrollbar;
        /**
         * @type {?}
         * @protected
         */
        NgScrollbarReachedEnd.prototype.zone;
        /**
         * @type {?}
         * @private
         */
        NgScrollbarReachedEnd.prototype.dir;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgScrollbarReachedModule = /** @class */ (function () {
        function NgScrollbarReachedModule() {
        }
        NgScrollbarReachedModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            ngxScrollbar.NgScrollbarModule,
                            bidi.BidiModule
                        ],
                        declarations: [
                            NgScrollbarReachedTop,
                            NgScrollbarReachedBottom,
                            NgScrollbarReachedStart,
                            NgScrollbarReachedEnd
                        ],
                        exports: [
                            NgScrollbarReachedTop,
                            NgScrollbarReachedBottom,
                            NgScrollbarReachedStart,
                            NgScrollbarReachedEnd
                        ]
                    },] }
        ];
        return NgScrollbarReachedModule;
    }());

    exports.NgScrollbarReachedBottom = NgScrollbarReachedBottom;
    exports.NgScrollbarReachedEnd = NgScrollbarReachedEnd;
    exports.NgScrollbarReachedModule = NgScrollbarReachedModule;
    exports.NgScrollbarReachedStart = NgScrollbarReachedStart;
    exports.NgScrollbarReachedTop = NgScrollbarReachedTop;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-scrollbar-reached-event.umd.js.map
