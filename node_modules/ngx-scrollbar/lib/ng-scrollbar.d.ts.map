{"version":3,"file":"ng-scrollbar.d.ts","sources":["/home/nikola/Documents/Repos/ivy-bug/ngx-scroll-ivy-bug/ngx-scrollbar-bug/node_modules/ngx-scrollbar/lib/ng-scrollbar.d.ts"],"sourcesContent":["import { OnInit, AfterViewChecked, OnDestroy, NgZone, ElementRef, EventEmitter, ChangeDetectorRef } from '@angular/core';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { Observable } from 'rxjs';\r\nimport { SmoothScrollElement, SmoothScrollManager, SmoothScrollToOptions } from 'ngx-scrollbar/smooth-scroll';\r\nimport { ScrollbarAppearance, ScrollbarTrack, ScrollbarPosition, ScrollbarVisibility, NgScrollbarState } from './ng-scrollbar.model';\r\nimport { ScrollbarManager } from './utils/scrollbar-manager';\r\nimport { NativeScrollbarSizeFactory } from './utils/native-scrollbar-size-factory';\r\nexport declare class NgScrollbar implements OnInit, AfterViewChecked, OnDestroy {\r\n    private el;\r\n    private zone;\r\n    private changeDetectorRef;\r\n    private dir;\r\n    private smoothScroll;\r\n    manager: ScrollbarManager;\r\n    nativeScrollbarSizeFactory: NativeScrollbarSizeFactory;\r\n    /** Default viewport reference */\r\n    private defaultViewPort;\r\n    /** Custom viewport reference */\r\n    private customViewPort;\r\n    /** A class forwarded to scrollable viewport element */\r\n    viewClass: string;\r\n    /** A class forwarded to the scrollbar track element */\r\n    trackClass: string;\r\n    /** A class forwarded to the scrollbar thumb element */\r\n    thumbClass: string;\r\n    /** Minimum scrollbar thumb size */\r\n    minThumbSize: number;\r\n    /** The duration which the scrolling takes to reach its target when scrollbar rail is clicked */\r\n    trackClickScrollDuration: number;\r\n    /** A flag used to enable/disable the scrollbar track clicked event */\r\n    trackClickDisabled: boolean;\r\n    /** A flag used to enable/disable the scrollbar thumb dragged event */\r\n    thumbDragDisabled: boolean;\r\n    /** Disable custom scrollbar and switch back to native scrollbar */\r\n    disabled: boolean;\r\n    /**\r\n     * Sets the supported scroll track of the viewport, there are 3 options:\r\n     *\r\n     * - `vertical` Use both vertical and horizontal scrollbar\r\n     * - `horizontal` Use both vertical and horizontal scrollbar\r\n     * - `all` Use both vertical and horizontal scrollbar\r\n     */\r\n    track: ScrollbarTrack;\r\n    /**\r\n     * When to show the scrollbar, and there are 3 options:\r\n     *\r\n     * - `native` (default) Scrollbar will be visible when viewport is scrollable like with native scrollbar\r\n     * - `hover` Scrollbars are hidden by default, only visible on scrolling or hovering\r\n     * - `always` Scrollbars are always shown even if the viewport is not scrollable\r\n     */\r\n    visibility: ScrollbarVisibility;\r\n    /**\r\n     *  Sets the appearance of the scrollbar, there are 2 options:\r\n     *\r\n     * - `standard` (default) scrollbar space will be reserved just like with native scrollbar.\r\n     * - `compact` scrollbar doesn't reserve any space, they are placed over the viewport.\r\n     */\r\n    appearance: ScrollbarAppearance;\r\n    /**\r\n     * Sets the position of each scrollbar, there are 4 options:\r\n     *\r\n     * - `native` (Default) Use the default position like in native scrollbar.\r\n     * - `invertY` Inverts vertical scrollbar position\r\n     * - `invertX` Inverts Horizontal scrollbar position\r\n     * - `invertAll` Inverts both scrollbar positions\r\n     */\r\n    position: ScrollbarPosition;\r\n    /** Debounce interval for detecting changes via ResizeObserver */\r\n    sensorDebounce: number;\r\n    /** Whether ResizeObserver is disabled */\r\n    sensorDisabled: boolean;\r\n    /** Steam that emits when scrollbar is updated */\r\n    updated: EventEmitter<void>;\r\n    /** Viewport Element */\r\n    viewport: HTMLElement;\r\n    /** Content Wrapper element */\r\n    contentWrapper: HTMLElement | undefined;\r\n    /** stream that emits on scroll event */\r\n    scrolled: Observable<any>;\r\n    /** Steam that emits scroll event for vertical scrollbar */\r\n    verticalScrolled: Observable<any>;\r\n    /** Steam that emits scroll event for horizontal scrollbar */\r\n    horizontalScrolled: Observable<any>;\r\n    /** Default viewport classes */\r\n    viewportClasses: any;\r\n    /** Set of attributes added on the scrollbar wrapper */\r\n    state: NgScrollbarState;\r\n    /** Stream that destroys components' observables */\r\n    private destroyed;\r\n    constructor(el: ElementRef, zone: NgZone, changeDetectorRef: ChangeDetectorRef, dir: Directionality, smoothScroll: SmoothScrollManager, manager: ScrollbarManager, nativeScrollbarSizeFactory: NativeScrollbarSizeFactory);\r\n    private getScrolledByDirection;\r\n    /**\r\n     * Update local state with each change detection\r\n     */\r\n    private updateState;\r\n    private _updateState;\r\n    setHovered(hovered: ScrollbarHovered): void;\r\n    setDragging(dragging: ScrollbarDragging): void;\r\n    /**\r\n     * Set the viewport based on user choice\r\n     */\r\n    private setViewport;\r\n    ngOnInit(): void;\r\n    ngAfterViewChecked(): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Update local state and the internal scrollbar controls\r\n     */\r\n    update(): void;\r\n    /**\r\n     * Smooth scroll functions\r\n     */\r\n    scrollTo(options: SmoothScrollToOptions): Promise<void>;\r\n    /**\r\n     * Scroll to element by reference or selector\r\n     */\r\n    scrollToElement(target: SmoothScrollElement, options?: any): Promise<void>;\r\n}\r\ninterface ScrollbarDragging {\r\n    verticalDragging?: boolean;\r\n    horizontalDragging?: boolean;\r\n}\r\ninterface ScrollbarHovered {\r\n    verticalHovered?: boolean;\r\n    horizontalHovered?: boolean;\r\n}\r\nexport {};\r\n"],"names":[],"mappings":"AAAA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;;;;;;;;;;"}