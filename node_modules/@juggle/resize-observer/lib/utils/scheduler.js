import { process } from '../ResizeObserverController';
import { prettifyConsoleOutput } from './prettify';
import { global } from './global';
var CATCH_FRAMES = 60 / 5;
var requestAnimationFrame = global.requestAnimationFrame;
var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };
var events = [
    'resize',
    'load',
    'transitionend',
    'animationend',
    'animationstart',
    'animationiteration',
    'keyup',
    'keydown',
    'mouseup',
    'mousedown',
    'mouseover',
    'mouseout',
    'blur',
    'focus'
];
var rafSlot = new Map();
var resizeObserverSlot = new Map();
var scheduled;
var dispatchCallbacksOnNextFrame = function () {
    if (scheduled) {
        return;
    }
    scheduled = true;
    function runSchedule(t) {
        scheduled = false;
        var frameCallbacks = [];
        var resizeObserverCallbacks = [];
        rafSlot.forEach(function (callback) { return frameCallbacks.push(callback); });
        resizeObserverSlot.forEach(function (callback) { return resizeObserverCallbacks.push(callback); });
        rafSlot.clear();
        resizeObserverSlot.clear();
        try {
            for (var _i = 0, frameCallbacks_1 = frameCallbacks; _i < frameCallbacks_1.length; _i++) {
                var callback = frameCallbacks_1[_i];
                callback(t);
            }
        }
        finally {
            for (var _a = 0, resizeObserverCallbacks_1 = resizeObserverCallbacks; _a < resizeObserverCallbacks_1.length; _a++) {
                var callback = resizeObserverCallbacks_1[_a];
                callback(t);
            }
        }
    }
    ;
    requestAnimationFrame(runSchedule);
};
var Scheduler = (function () {
    function Scheduler() {
        var _this = this;
        this.stopped = true;
        this.listener = function () { return _this.schedule(); };
    }
    Scheduler.prototype.run = function (frames) {
        var scheduler = this;
        resizeObserverSlot.set(this, function ResizeObserver() {
            var elementsHaveResized = false;
            try {
                elementsHaveResized = process();
            }
            finally {
                if (elementsHaveResized) {
                    scheduler.run(60);
                }
                else if (frames) {
                    scheduler.run(frames - 1);
                }
                else {
                    scheduler.start();
                }
            }
        });
        dispatchCallbacksOnNextFrame();
    };
    Scheduler.prototype.schedule = function () {
        this.stop();
        this.run(CATCH_FRAMES);
    };
    Scheduler.prototype.observe = function () {
        var _this = this;
        var cb = function () { return _this.observer && _this.observer.observe(document.body, observerConfig); };
        document.body ? cb() : global.addEventListener('DOMContentLoaded', cb);
    };
    Scheduler.prototype.start = function () {
        var _this = this;
        if (this.stopped) {
            this.stopped = false;
            if ('MutationObserver' in global) {
                this.observer = new MutationObserver(this.listener);
                this.observe();
            }
            events.forEach(function (name) { return global.addEventListener(name, _this.listener, true); });
        }
    };
    Scheduler.prototype.stop = function () {
        var _this = this;
        if (!this.stopped) {
            this.observer && this.observer.disconnect();
            events.forEach(function (name) { return global.removeEventListener(name, _this.listener, true); });
            this.stopped = true;
        }
    };
    return Scheduler;
}());
var scheduler = new Scheduler();
var rafIdBase = 0;
global.requestAnimationFrame = function (callback) {
    if (typeof callback !== 'function') {
        throw new Error('requestAnimationFrame expects 1 callback argument of type function.');
    }
    var handle = rafIdBase += 1;
    rafSlot.set(handle, function AnimationFrame(t) { return callback(t); });
    dispatchCallbacksOnNextFrame();
    return handle;
};
global.cancelAnimationFrame = function (handle) {
    rafSlot.delete(handle);
};
prettifyConsoleOutput(global.requestAnimationFrame);
prettifyConsoleOutput(global.cancelAnimationFrame);
export { scheduler };
